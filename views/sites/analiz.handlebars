<!DOCTYPE html>  
<html lang="en">  
<head>  
    <meta charset="UTF-8">  
    <meta name="viewport" content="width=device-width, initial-scale=1.0"> 
    <title>Analizler</title>
    <link rel="icon" type="image/png" href="img/icon.png" sizes="32x32">
    <!-- Bootstrap CSS -->  
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css" rel="stylesheet">  
    <link rel="stylesheet" href="/css/index.css"> 
     
    <style> 
        body {
            min-height: 130vh;
            height: 110%;
            margin: 0;
            background: linear-gradient(to bottom, #fff, #dbeafe 75%);
        }
        .city-silhouette {
            position: fixed;   /* absolute değil, fixed! */
            left: 0; right: 0; bottom: 0;
            width: 100vw;
            height: 24vh;
            min-height: 100px;
            max-height: 220px;
            pointer-events: none;
            opacity: 0.5;
        }
        .main-content {
            position: relative;
            z-index: 2;
        }
        .frost {
            backdrop-filter: blur(8px) brightness(0.96);
        }

        .container-navbar {  
            display: flex;  
            flex: 0 0 100%;  
            flex-wrap: nowrap;  
            align-items: center;  
            justify-content: center;  
            margin: 0px;
        }

        .custom-short-menu {
            display: flex;
            gap: 22px;
            justify-content: center;   /* Ortala */
            align-items: flex-start;
            width: 100%;
            margin-top: 18px;
            margin-bottom: 10px;
        }

        .menu-btn {
            display: flex;
            flex-direction: column;
            align-items: center;
            width: 70px;
            text-decoration: none;
            background: none;
            border: none;
            outline: none;
            transition: color 0.18s, background 0.18s;
        }

        .menu-btn img {
            width: 32px;
            height: 32px;
            margin-bottom: 4px;
        }

        .menu-btn span {
            font-size: 14px;
            color: #333;
        }

        .menu-btn:hover span,
        .menu-btn:focus span {
            color: #1d67c4;
            font-weight: 500;
        }

        #buttonHome {
            margin-right: 18px; /* Sağdan istediğin kadar boşluk (arttırabilirsin) */
        }



        .container-fluid {  
            display: flex;  
            flex: 0 0 100%;  
            flex-wrap: nowrap;  
            align-items: center;  
        }  
        #projectName {  
            flex: 0 0 90%;  
            white-space: nowrap;  
            overflow: hidden;  
            text-overflow: ellipsis;  
            font-family: Arial, sans-serif;  
            font-size: 36px;
        }  
        .img-fluid {  
            flex: 0 0 auto;  
            height: 30px;  
            width: 30px;  
            margin-right: 10px;  
        }
        .custom-btn {  
            background-color: #847539;
            color: white; /* Yazı rengi */  
            border: none; /* Kenarlığın kaldırılması */  
            border-radius: 10px; /* Kenarlıkları yuvarlaklaştırma */  
            padding: 10px 20px; /* İç boşluklar */  
            font-family: "Varela Round";  
            font-size: 16px; /* Yazı boyutu */  
            font-weight: bold; /* Kalın yazı */  
            letter-spacing: 2px;
            cursor: pointer; /* Fare imlecini işaretçi yapma */  
            transition: background-color 0.3s ease; /* Hover geçiş efekti */
            margin-right: 40px;
        }

        .container{
            width: 70% !important;
        }
        .container-arsa-giderleri {
            margin-top: 30px !important;
        }
        .container-arsa-giderleri h3{
            font-size: 26px;
        }
        .custom-flex {  
            display: flex;  
            flex-direction: column;  
            gap: 0.5rem;  
            justify-content: center; /* Ortala */  
            align-items: flex-start;  /* Sola yasla */  
        }
        .custom-width{
            width: 50%;
        }


        .modal-title{
            font-family: Arial, sans-serif;
            font-size: 20px;
            font-weight: bold;
        }
      
    
    
        #container-graph { 
            background: #fff; 
            padding: 24px; 
            border-radius: 8px; 
            box-shadow: 0 2px 10px #0001; 
            width: 600px; 
            margin: auto;
        }  



        .kpi-kart {  
          background: white;  
          border-radius: 18px;  
          box-shadow: 0 4px 24px rgba(0,0,0,0.07);  
          border-top: 4px solid #3b82f6;  
          max-width: 340px;
          width: 100%;  
          padding: 2rem 1.5rem;  
          box-sizing: border-box;
          display: flex;  
          flex-direction: column;  
          align-items: center;  
          margin: 1 rem 0;
        }  

        .kpi-baslik {  
          color: #4b5563;  
          font-size: 1.2rem;  
          margin-bottom: 0.5rem;  
          font-family: Arial, sans-serif;  
        }  
        .kpi-sayi {  
          color: #2563eb;  
          font-size: 3rem;  
          font-weight: 900;  
          margin-bottom: 0.5rem;  
          font-family: Arial Black, Arial, sans-serif;  
          letter-spacing: 1px;  
        }  
        .kpi-alt {  
          color: #9ca3af;  
          font-size: 1rem;  
          font-weight: 500;  
          letter-spacing: 1px;  
          font-family: Arial, sans-serif;  
        } 


        /* Mobil cihazlar için duyarlılık (%75 genişlik) */  
        @media (max-width: 768px) {
            body {
                min-height: 100vh;
                height: 100%;
            }
            .city-silhouette {
                position: fixed;
                left: 0; right: 0; bottom: 0;
                width: 100vw;
                height: 14vh;
                min-height: 70px;
                max-height: 150px;
            }

            .container-navbar {  
                flex-wrap: wrap;  
                justify-content: flex-end;  
            }  
            #projectName {
                flex: 0 0 70%;  
                overflow: hidden;  
                text-overflow: ellipsis;  
                white-space: nowrap;  
                text-align: left;
                font-size: 17px !important;  
                max-width: 65%;     /* Taşmayı önler */  
                min-width: 0;       /* flex shrink için gerekli */  
                margin-right: 0;    /* İstenirse gap için elle ekleyin */
            }  
            #buttonHome {
                flex: 0 0 30px;     /* Eğer 30px'lik bir kutu ise tam sabitlenir */  
                padding: 0;         /* Ekstra boşlukları engeller */  
                margin-left: 0;     /* İstenirse 5px gibi küçük bir boşluk eklenebilir */  
                display: flex;  
                align-items: center;
            }

            .custom-short-menu {
                display: flex;
                gap: 12px;
                justify-content: center;
                align-items: flex-start;
                width: 90% !important;
                margin-top: 12px;
                margin-left: auto;
                margin-right: auto; /* Ortalamak için */
            }
            .menu-btn {
                display: flex;
                flex-direction: column;
                align-items: center;
                flex: 1 1 0;    /* EŞİT yayılır, min 0 olur, büyüyebilir */
                text-decoration: none;
                background: none;
                border: none;
                outline: none;
                transition: color 0.18s, background 0.18s;
                min-width: 0;   /* Sıkışmaya izin verir */
            }
            .menu-btn img {
                width: 25px;
                height: 25px;
                margin-bottom: 4px;
            }
            .menu-btn span {
                font-size: 0.8rem;
                white-space: nowrap; /* Çok taşmasını önlemek için */
                text-align: center;
            }


            .img-fluid {  
                height: 28px;  
                width: 28px;  
                margin-right: 0;    /* Sağdan boşluğu kaldırır */  
                margin-left: 0;     /* Soldan boşluğu kaldırır */
            }  
            .custom-btn {  
              font-size: 12px; /* Yazı boyutu */
              padding: 5px 10px;      /* Yan boşlukları biraz artırdım */
              border-radius: 6px;      /* Köşeler hafif yuvarlatıldı */
              color: #fff;
              border: none;
              margin-right: 12px;
              display: inline-block; 
              font-weight: 500;   
            }
            .navbar-toggler {  
                /* background-color: rgb(89, 125, 234);  */
                background-color: #c2c5c9;
                flex: 0 0 auto;  
                margin-left: auto;  
                justify-content: flex-end;  
            }
            .container-fluid {  
                flex-wrap: wrap;  
            } 
            .dropdown-item{
                display: flex;
                margin-left: auto;  
                justify-content: flex-end;
            }
            .mobile-navbar-menu {  
                justify-content: flex-end !important;  
                text-align: right !important;  
                margin-top: 10px;
                margin-bottom: 5px;
            }  
            .mobile-navbar-menu .nav-item, .mobile-navbar-menu .dropdown-item-mobile {
                display: flex;
                align-items: center;
                justify-content: space-between !important;  
                text-align: right !important;
                font-size: 1.1rem;
                font-style: bold !important;
                height: 22px;
                margin-top: 2px;
                justify-self: end;
            }
            .dropdown-item-mobile {
                width: 34%;
                font-family: Arial, sans-serif !important; 
                color: rgb(94, 93, 93) !important;      /* Varsayılan metin rengini kullan */  
                text-decoration: none !important; /* Altı çizgiyi kaldır */  
                font-weight: 400 !important;
            }


            #container-graph { 
                background: #fff; 
                padding: 12px; 
                border-radius: 8px; 
                box-shadow: 0 2px 10px #0001; 
                width: 90%; 
                margin: auto; 
            } 

            .kpi-kart {
              max-width: 150px;
              height: 135px;  
              width: 100%;  
              padding: 1rem 0.7rem; 
              margin: 0.5 rem 0;
            }
            .kpi-baslik {  
              font-size: 0.9rem;  
              margin-bottom: 0.3rem;  
            }  
            .kpi-sayi {  
              font-size: 1.3rem;  
              margin-bottom: 0.4rem;  
              letter-spacing: 0.7px;  
            }  
            .kpi-alt {
              font-size: 0.8rem;
            }
        }
    </style>  
</head> 


<body class="relative min-h-screen w-full bg-gradient-to-b from-white to-blue-100 flex flex-col items-center justify-start">
  <!-- Alt Şehir Silüeti SVG -->
  <svg class="city-silhouette" viewBox="0 0 400 96" fill="none" preserveAspectRatio="none" width="100%" height="100%">
  <g>
    <!-- Sol bloklar -->
    <rect x="0" y="60" width="14" height="36" rx="2" fill="#6366f1" opacity="0.13"/>
    <rect x="16" y="40" width="22" height="56" rx="4" fill="#60a5fa" opacity="0.18"/>
    <!-- Çatılı bina -->
    <rect x="41" y="72" width="12" height="24" rx="2" fill="#818cf8" opacity="0.16"/>
    <polygon points="41,72 47,62 53,72" fill="#818cf8" opacity="0.28"/>
    <rect x="56" y="60" width="16" height="36" rx="3" fill="#38bdf8" opacity="0.14"/>
    <!-- Pencereli uzun blok -->
    <rect x="75" y="36" width="12" height="60" rx="2" fill="#60a5fa" opacity="0.15"/>
    <rect x="81" y="44" width="2" height="8" rx="1" fill="#fff" opacity="0.22"/>
    <rect x="81" y="60" width="2" height="8" rx="1" fill="#fff" opacity="0.15"/>
    <!-- Mini blok -->
    <rect x="90" y="80" width="7" height="16" rx="1.5" fill="#818cf8" opacity="0.19"/>
    
    <!-- Orta bloklar -->
    <rect x="100" y="66" width="18" height="30" rx="2" fill="#6366f1" opacity="0.09"/>
    <rect x="121" y="46" width="28" height="50" rx="3" fill="#818cf8" opacity="0.09"/>
    <rect x="152" y="78" width="12" height="18" rx="2" fill="#60a5fa" opacity="0.16"/>
    <!-- Yan yana iki blok farklı yükseklikte -->
    <rect x="170" y="69" width="16" height="27" rx="2" fill="#818cf8" opacity="0.12"/>
    <rect x="188" y="79" width="10" height="17" rx="2" fill="#6366f1" opacity="0.12"/>
    <!-- Asimetrik büyük blok -->
    <rect x="201" y="29" width="29" height="67" rx="4" fill="#60a5fa" opacity="0.14"/>
    <!-- Farklı ton kısa blok -->
    <rect x="233" y="74" width="12" height="22" rx="2" fill="#38bdf8" opacity="0.13"/>
    <!-- İnce yüksek blok -->
    <rect x="248" y="25" width="9" height="71" rx="2" fill="#818cf8" opacity="0.17"/>
    <!-- Diğer bloklar (düz, alçak/kalın) -->
    <rect x="260" y="79" width="23" height="17" rx="3" fill="#6366f1" opacity="0.1"/>
    <rect x="287" y="67" width="16" height="29" rx="2" fill="#60a5fa" opacity="0.11"/>
    <!-- Minik bloklar ve farklı renk -->
    <rect x="306" y="82" width="6" height="14" rx="1" fill="#818cf8" opacity="0.17"/>
    <rect x="316" y="68" width="10" height="28" rx="2" fill="#38bdf8" opacity="0.14"/>
    <!-- Geniş kısa bina -->
    <rect x="330" y="80" width="26" height="16" rx="2" fill="#6366f1" opacity="0.09"/>
    <!-- Sağda küçük çatılı blok -->
    <rect x="360" y="70" width="13" height="26" rx="2" fill="#60a5fa" opacity="0.12"/>
    <polygon points="360,70 366.5,61 373,70" fill="#60a5fa" opacity="0.22"/>
    <!-- Sağda yüksek son blok -->
    <rect x="378" y="24" width="18" height="72" rx="2.5" fill="#6366f1" opacity="0.11"/>
    <!-- En sağ mini pencere detayı -->
    <rect x="384" y="32" width="2.5" height="8" rx="1" fill="#fff" opacity="0.20"/>
  </g>
</svg>
    <!-- Responsive Header -->  
  <nav class="header d-flex justify-content-between align-items-center px-3">
    <span class="d-flex align-items-center gap-2">
        <img src="img/icon.png" alt="Logo" width="32" height="32">
        Yapıo
    </span>
    <button class="btn custom-btn" id="loginButton" style="display: none;">PROJELER</button>  
  </nav>

  <!-- Navbar -->  
  <nav class="navbar navbar-expand-lg navbar-light bg-light sticky-top shadow-sm mt-4 container-navbar">  
      <div class="container-fluid">  
          <!-- Proje Adı -->  
          <h4 class="navbar-brand" id="projectName">Proje Adı</h4>  
          <!-- Ana Sayfa Butonu -->  
          <button class="btn d-flex navbar-home-button" id="buttonHome">  
              <img src="img/home1_1.png" alt="Katlar Görseli" class="img-fluid rounded">  
          </button>
      </div>  
  </nav> 

  <div class="custom-short-menu" id="regulation-button-area">
      <a class="menu-btn" id="document-button" href="#">
          <img src="/img/building-plan.png" alt="">
          <span>Yapı Süreci</span>
      </a>
      <a class="menu-btn" id="sold-button" href="#">
          <img src="/img/property.png" alt="">
          <span>Satış</span>
      </a>
      <a class="menu-btn" id="material-button" href="#">
        <img src="/img/list.png" alt="">
        <span>Malzeme<br>Yönetimi</span>
    </a>
  </div>

  <div class="mt-4 graph" id="container-graph">  
    <h2 class="d-flex justify-content-center">Giderler</h2>  
    <canvas id="myChart" width="400" height="250"></canvas>  
  </div>  

  <!-- KPI Kartı Burada -->
  <div class="d-flex justify-content-center gap-4 mt-4 mb-4">  
    <div class="kpi-kart">  
      <div class="kpi-baslik">Toplam Gider</div>  
      <div class="kpi-sayi" id="genelToplamText">0</div>  
      <div class="kpi-alt">TL</div>  
    </div>  
    <div class="kpi-kart">  
      <div class="kpi-baslik">m² Maliyet</div>  
      <div class="kpi-sayi" id="mKareMaliyetText">0</div>  
      <div class="kpi-alt">TL</div>  
    </div>  
  </div>

  <!-- Modal -->
  <div class="modal fade" id="myInfoModal" tabindex="-1" aria-labelledby="myInfoModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="myInfoModalLabel">Detay Başlığı</h5>
        </div>
        <div class="modal-body" id="modal-body-content">
          <canvas id="detailChart"></canvas>
        </div>
      </div>
    </div>
  </div>

  <!-- Ana grafik -->
  <canvas id="myChart"></canvas>
  


  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script> 
  <script type="module">
    import { showWarningMessage } from '/js/showMessage.js';
    
    const projectNameString = document.getElementById("projectName");
    const buttonHome = document.getElementById("buttonHome");
    //const quatationButton = document.getElementById("quatation-button"); 
    const soldButton = document.getElementById("sold-button");
    const material = document.getElementById("material-button");
    const genelToplamText = document.getElementById("genelToplamText");
    const mKareMaliyetText = document.getElementById("mKareMaliyetText");
    const loginButton = document.getElementById("loginButton");
    const documentButton = document.getElementById("document-button");

    const materialNames = {
        "demir": "DEMİR",
        "beton": "BETON",
        "tel": "TEL",
        "civi": "ÇİVİ",
        "su_tutucu_bant": "SU TUTUCU BANT",
        "citleme": "ÇİT",
        "mebran": "MEBRAN",
        "likit_mebran": "LİKİT MEBRAN",
        "drenaj_levhasi": "DRENAJ LEVHASI",
        "celik_hasir": "ÇELİK HASIR",
        "kereste": "KERESTE",
        "osb": "OSB",
        "cati_izalasyonu": "ÇATI İZALASYONU",
        "kiremit": "KİREMİT",
        "cimento": "ÇİMENTO",
        "duvar_blogu": "DUVAR BLOĞU",
        "kirec": "KİREÇ",
        "kum_cakil": "KUM-ÇAKIL",
        "kum": "KUM",
        "seramik": "SERAMİK",
        "parke": "PARKE",
        "mermer": "MERMER",
        "zeminBoyasi": "ZEMİN BOYASI",
        "epoksi": "EPOKSİ",
        "korKasa": "KÖR KASA",
        "kosebent": "KÖŞEBENT",
        "betonAstari": "BETON ASTARI",
        "alci": "ALÇI",
        "hazirSivaIc": "HAZIR SIVA İÇ",
        "icCepheBoyasi": "İÇ CEPHE BOYASI",
        "boyaAstari": "BOYA ASTARI",
        "zeminYalitimi": "ZEMİN YALITIMI",
        "seramikFayans": "SERAMİK-FAYANS",
        "klozetler": "KLOZETLER",
        "lavabolar": "LAVABOLAR",
        "banyoDolabi": "BANYO DOLABI",
        "dusTeknesi": "DUŞ TEKNESİ",
        "banyoBataryasi": "BANYO BATARYASI",
        "lavaboBataryasi": "LAVABO BATARYASI",
        "tezgah": "TEZGAH",
        "mutfakEvye": "MUTFAK EVYE",
        "mutfakDolabi": "MUTFAK DOLABI",
        "mutfakBataryasi": "MUTFAK BATARYASI",
        "ankastre": "ANKASTRE",
        "pencereler": "PENCERELER",
        "zeminDograma": "ZEMİN DOĞRAMA",
        "odaKapilari": "ODA KAPILARI",
        "celikKapilar": "ÇELİK KAPILAR",
        "hazirSivaDis": "HAZIR SIVA DIŞ",
        "disCepheBoyasi": "DIŞ CEPHE BOYASI",
        "duvel_montaj": "DUVEL",
        "yalitim_levha": "YALITIM LEVHASI",
        "karbonluEps": "KARBONLU EPS",
        "xps": "XPS",
        "tasYunu": "TAŞ YÜNÜ",
        "file_siva": "SIVA FİLESİ",
        "kaplama_siva": "KAPLAMA SIVASI",
        "dekoratif_kaplama": "DEKORATİF KAPLAMA (MANTOLAMA)",
        "stropiyer": "STROPİYER",
        "alcipan": "ALÇIPAN",
        "karolem": "KAROLEM",
        "kombi": "KOMBİ",
        "kombiDolabi": "KOMBİ DOLABI",
        "klima": "KLİMA",
        "perforje": "PERFORJE"
    }

    let userId = null;
    let projectName = null;
    let building = null;
    let userProjectInfos = null;

    let arsaBedeliTutar = 0;
    let yerSahibiAlinanParaTutar = 0;
    let yerSahibiVerilenParaTutar = 0;
    let yerSahibiDaireMetreKare = 0;
    let santiyeKurulumuTutar = 0;
    let arsaGiderleriToplam = 0;
    let yerdenCikartmakTutar = 0;
    let kiraBedeliTutar = 0;
    let arsaDigerTutar = 0;
    let belediyeGiderleriToplam = 0;
    let aplikasyonTutar = 0;
    let imarDurumuTutar = 0;
    let kanalKotuTutar = 0;
    let ruhsatHarciTutar = 0;
    let zeminEtuduHarciTutar = 0;
    let noterGiderleriToplam = 0;
    let muteahhitlikSozlesmesiTutar = 0;
    let vekaletSozlesmesiTutar = 0;
    let yapiDenetimToplam = 0;
    let yapiDenetimHarciTutar = 0;
    let fenniJeolojiTutar = 0;
    let fenniHaritaciTutar = 0;
    let zeminEtuduToplam = 0;
    let zeminEtuduRaporuTutar = 0;
    let zeminIyilestirmeTutar = 0;
    let projelerToplam = 0;
    let mimariTutar = 0;
    let statikTutar = 0;
    let tesisatTutar = 0;
    let hesTutar = 0;
    let akustikTutar = 0;
    let evrakToplam = 0;
    let ruhsatToplam = 0;
    let kabaToplam = 0;
    let santiyeKurmaToplam = 0;
    let citlemeTutar = 0;
    let nizamiyeTutar = 0;
    let konteyner_ofisTutar = 0;
    let konteyner_yemekTutar = 0;
    let konteyner_wcTutar = 0;
    let elektrikTutar = 0;
    let suTutar = 0;
    let zemin_betonuTutar = 0;
    let depoTutar = 0;
    let jeneratorTutar = 0;
    let su_deposuTutar = 0;
    let aydinlatmaTutar = 0;
    let camasirhaneTutar = 0;
    let guvenlik_kameraTutar = 0;
    let yanginTutar = 0;
    let ilk_yardimTutar = 0;
    let tasinimTutar = 0;
    let iskeleTutar = 0;
    let digerSantiyeTutar = 0;
    let temelKazmaToplam = 0;
    let kazi_yapimiTutar = 0;
    let makine_kiralamaTutar =0 ;
    let yuklemeTutar = 0;
    let tasimaTutar = 0;
    let tesviyeTutar =0 ;
    let iksaTutar = 0;
    let drenajTutar = 0;
    let su_indirimiTutar = 0;
    let hafriyat_depolamaTutar = 0;
    let elle_kaziTutar = 0;
    let kaba_kaziTutar = 0;
    let ince_kaziTutar = 0;
    let patlatmaTutar = 0;
    let kontrollukTutar = 0;
    let zemin_testTutar =0;
    let gecici_yolTutar = 0;
    let guvenlikTutar =0;
    let digertemelKazmaTutar = 0;
    let groBetonToplam = 0;
    let alan_hazirligiTutar = 0;
    let kalipTutar = 0;
    let beton_teminiTutar = 0;
    let gro_beton_sermeTutar = 0;
    let tesviyeGroTutar = 0;
    let sikistirmaTutar = 0;
    let bakimTutar = 0;
    let numuneTutar = 0;
    let temizlikTutar = 0;
    let digerGroTutar = 0;
    let radyalTemelToplam = 0;
    let demirTutar = 0;
    let betonTutar = 0;
    let telTutar = 0;
    let civiTutar = 0;
    let digerRadyalTemelTutar = 0;
    let perdeBetonuToplam = 0;
    let demirPerdeBetonuTutar = 0;
    let betonPerdeBetonuTutar = 0;
    let telperdeBetonuTutar = 0;
    let civiPerdeBetonuTutar = 0;
    let digerPerdeBetonuTutar = 0;
    let temelIzalasyonuToplam = 0;
    let su_tutucu_bantTutar = 0;
    let mebranTutar = 0;
    let likit_mebranTutar = 0;
    let drenaj_levhasiTutar = 0;
    let dolguToplam = 0;
    let malzeme_teminiTutar = 0;
    let alan_hazirligiDolguTutar = 0;
    let sermeTutar = 0;
    let sikistirmaDolguTutar = 0;
    let nemlendirmeTutar = 0;
    let seviye_kontrolTutar = 0;
    let numuneDolguTutar = 0;
    let gecici_yolDolguTutar = 0;
    let atik_tasimaTutar = 0;
    let drenajDolguTutar = 0;
    let digerDolguTutar = 0;
    let suBasmanToplam = 0;
    let celik_hasirTutar = 0;
    let betonSubasmanTutar = 0;
    let digerSubasmanTutar = 0;
    let zeminBetonuToplam = 0;
    let demirZeminBetonuTutar = 0;
    let betonZeminBetonuTutar = 0;
    let telZeminBetonuTutar = 0;
    let civiZeminBetonuTutar = 0;
    let digerZeminBetonuTutar = 0;
    let katBetonlariToplam = 0;
    let demirkatBetonlariTutar = 0;
    let betonkatBetonlariTutar = 0;
    let telkatBetonlariTutar = 0;
    let civikatBetonlariTutar = 0;
    let digerkatBetonlariTutar = 0;
    let kapamaBetonuToplam = 0;
    let demirkapamaBetonuTutar = 0;
    let betonkapamaBetonuTutar = 0;
    let telkapamaBetonuTutar = 0;
    let civikapamaBetonuTutar = 0;
    let digerkapamaBetonuTutar = 0;
    let catiUygulamaToplam = 0;
    let keresteTutar = 0;
    let osbTutar = 0;
    let cati_izalasyonuTutar = 0;
    let kiremitTutar = 0;
    let digercatiUygulamaTutar = 0;
    let duvarOrmeToplam = 0;
    let cimentoTutar = 0;
    let duvar_bloguTutar = 0;
    let kirecTutar = 0;
    let kum_cakilTutar = 0;
    let digerduvarOrmeTutar = 0;
    let sapToplam = 0;
    let kumTutar = 0;
    let cimentoSapTutar = 0;
    let digerSapTutar = 0;
    let inceToplam = 0;
    let zeminUygulamalariToplam = 0;
    let seramikTutar = 0;
    let parkeTutar = 0;
    let mermerTutar = 0;
    let zeminBoyasiTutar = 0;
    let epoksiTutar = 0;
    let digerZeminUygulamalariTutar = 0;
    let icCepheToplam = 0;
    let korKasaTutar = 0;
    let kosebentTutar = 0;
    let betonAstariTutar = 0;
    let alciTutar = 0;
    let cimentoIcCepheTutar = 0;
    let kumIcCepheTutar = 0;
    let hazirSivaIcTutar = 0;
    let icCepheBoyasiTutar = 0;
    let boyaAstariTutar = 0;
    let digerIcCepheTutar = 0;
    let islakMekanlarToplam = 0;
    let zeminYalitimiTutar = 0;
    let seramikFayansTutar = 0;
    let klozetlerTutar = 0;
    let lavabolarTutar = 0;
    let banyoDolabiTutar = 0;
    let dusTeknesiTutar = 0;
    let banyoBataryasiTutar = 0;
    let lavaboBataryasiTutar = 0;
    let digerIslakMekanlarTutar = 0;
    let mutfakToplam = 0;
    let tezgahTutar = 0;
    let mutfakEvyeTutar = 0;
    let mutfakDolabiTutar = 0;
    let mutfakBataryasiTutar = 0;
    let ankastreTutar = 0;
    let digerMutfakTutar = 0;
    let pimapenToplam = 0;
    let pencerelerTutar = 0;
    let zeminDogramaTutar = 0;
    let digerPimapenTutar = 0;
    let kapilarToplam = 0;
    let odaKapilariTutar = 0;
    let celikKapilarTutar = 0;
    let digerKapilarTutar = 0;
    let korkuluklarToplam = 0;
    let balkonTutar = 0;
    let merdivenTutar = 0;
    let digerKorkuluklarTutar = 0;
    let disCepheToplam = 0;
    let hazirSivaDisTutar = 0;
    let cimentoDisCepheTutar = 0;
    let kumDisCepheTutar = 0;
    let disCepheBoyasiTutar = 0;
    let soveTutar = 0;
    let boyaAstariDisCepheTutar = 0;
    let digerDisCepheTutar = 0;
    let mantolamaToplam = 0;
    let duvel_montajTutar = 0;
    let yalitim_levhaTutar = 0;
    let karbonluEpsTutar = 0;
    let xpsTutar = 0;
    let tasYunuTutar = 0;
    let file_sivaTutar = 0;
    let kaplama_sivaTutar = 0;
    let dekoratif_kaplamaTutar = 0;
    let digerMantolamaTutar = 0;
    let tavanToplam = 0;
    let stropiyerTutar = 0;
    let alcipanTutar = 0;
    let karolemTutar = 0;
    let digerTavanTutar = 0;
    let elektrikTesisatToplam = 0;
    let elektrikIsciligiTutar = 0;
    let digerElektrikTutar = 0;
    let sihhiTesisatToplam = 0;
    let pisSuTutar = 0;
    let temizSuTutar = 0;
    let isitmaTutar = 0;
    let digerSihhiTesisatTutar = 0;
    let dogalgazToplam = 0;
    let dogalgazKurulumuTutar = 0;
    let digerDogalgazTutar = 0;
    let asansorKurulumuToplam = 0;
    let asansorKurulumuTutar = 0;
    let digerAsansorTutar = 0;
    let iklimlendirmeToplam = 0;
    let kombiTutar = 0;
    let kombiDolabiTutar = 0;
    let klimaTutar = 0;
    let digerIklimlendirmeTutar = 0;
    let peyzajToplam = 0;
    let bahceDuvariTutar = 0;
    let bitkilendirmeTutar = 0;
    let perforjeTutar = 0;
    let digerPeyzajTutar = 0;
    let kadastroToplam = 0;
    let tapuToplam = 0;
    let vergiToplam = 0;
    let sskToplam = 0;
    let avukatToplam = 0;
    let emlakciToplam = 0;
    let reklamToplam = 0;
    let isciliklerToplam = 0;
    let kalipIsciligiToplam = 0;
    let demirIsciligiToplam = 0;
    let duvarOrmeIsciligiToplam = 0;
    let sivaIsciligiToplam = 0;
    let sapIsciligiToplam = 0;
    let catiIsciligiToplam = 0;
    let mantolamaIsciligiToplam = 0;
    let yalitimIsciligiToplam = 0;
    let suTesisatiIsciligiToplam = 0;
    let elektrikIsciligiToplam = 0;
    let dogalgazIsciligiToplam = 0;
    let asansorIsciligiToplam = 0;
    let dekorAlcipanIsciligiToplam = 0;
    let perforjeIsciligiToplam = 0;
    let digerIsciligiToplam = 0;
    let malzemelerToplam = 0;

    let genelToplam = 0;
    let mKareMaliyet = 0;
    let mKareToplam = 0;

    // DOM yüklendiğinde işlem başlat  
    document.addEventListener("DOMContentLoaded", async () => {  
        event.preventDefault();

        window.user = {{#if user}}
            { "email": "{{user.email}}", "role": "{{user.role}}", "userId": "{{user.id}}", "project": {{{json project}}} }
        {{else}}
            { "role": "{{role}}" }
        {{/if}};

        userProjectInfos = window.user.project || [];
        //console.log("userProjectInfos:",userProjectInfos);

        userId = window.user.userId;
        projectName = window.user.project.projectName;

        if(userId){
            loginButton.style.display = "block";
        } else{
            loginButton.style.display = "none";
        }
        if(projectName){
            const projectNameText = projectName.toUpperCase();
            projectNameString.textContent = projectNameText;
        }

        
        const arsaBedeli = userProjectInfos.arsaBedeliArsa;
        if(Array.isArray(arsaBedeli) && arsaBedeli.length > 0){
          arsaBedeli.forEach(element => {
            arsaBedeliTutar += parseInt(element.toplamTutar);
          });
        }
        const yerSahibiIlePara = userProjectInfos.anaPara;
        if(Array.isArray(yerSahibiIlePara) && yerSahibiIlePara.length > 0){
          yerSahibiIlePara.forEach(element => {
            if(element.tip === "alinacak"){
              yerSahibiAlinanParaTutar += parseInt(element.tutar);
            } else if(element.tip === "verilecek"){
              yerSahibiVerilenParaTutar += parseInt(element.tutar);
            }
          });
        }
        const yerSahibiDaire = userProjectInfos.yerSahibiIleAnlasma;
        if(Array.isArray(yerSahibiDaire) && yerSahibiDaire.length > 0){
          yerSahibiDaire.forEach(element => {
            for (let i=0; i<userProjectInfos.building.length; i++){
              if(element.rowNumber === userProjectInfos.building[i].rowNumber){
                yerSahibiDaireMetreKare += parseInt(userProjectInfos.building[i].genelBrutAlan);
                break;
              }
            }
          });
        }
        const yerdenCikartmak = userProjectInfos.yerdenCikartmakArsa;
        if(Array.isArray(yerdenCikartmak) && yerdenCikartmak.length > 0){
          yerdenCikartmak.forEach(element => {
            yerdenCikartmakTutar += parseInt(element.toplamTutar);
          });
        }
        const kiraBedeli = userProjectInfos.kiraBedeliArsa;
        if(Array.isArray(kiraBedeli) && kiraBedeli.length > 0){
          kiraBedeli.forEach(element => {
            kiraBedeliTutar += parseInt(element.toplamTutar);
          });
        }
        const arsaDiger = userProjectInfos.arsaDigerArsa;
        if(Array.isArray(arsaDiger) && arsaDiger.length > 0){
          arsaDiger.forEach(element => {
            arsaDigerTutar += parseInt(element.toplamTutar);
          });
        }
        arsaGiderleriToplam = arsaBedeliTutar + santiyeKurulumuTutar + yerdenCikartmakTutar + kiraBedeliTutar + arsaDigerTutar;


        const aplikasyonBedeli = userProjectInfos.aplikasyon;
        if(Array.isArray(aplikasyonBedeli) && aplikasyonBedeli.length > 0){
          aplikasyonBedeli.forEach(element => {
            aplikasyonTutar += parseInt(element.toplamTutar);
          });
        }
        const imarDurumuBedeli = userProjectInfos.imarDurumuKaydi;
        if(Array.isArray(imarDurumuBedeli) && imarDurumuBedeli.length > 0){
          imarDurumuBedeli.forEach(element => {
            imarDurumuTutar += parseInt(element.toplamTutar);
          });
        }
        const kanalKotuBedeli = userProjectInfos.kanalKotu;
        if(Array.isArray(kanalKotuBedeli) && kanalKotuBedeli.length > 0){
          kanalKotuBedeli.forEach(element => {
            kanalKotuTutar += parseInt(element.toplamTutar);
          });
        }
        const zeminEtuduHarciBedeli = userProjectInfos.zeminEtuduHarci;
        if(Array.isArray(zeminEtuduHarciBedeli) && zeminEtuduHarciBedeli.length > 0){
          zeminEtuduHarciBedeli.forEach(element => {
            zeminEtuduHarciTutar += parseInt(element.toplamTutar);
          });
        }
        belediyeGiderleriToplam = aplikasyonTutar+imarDurumuTutar+kanalKotuTutar+ruhsatHarciTutar+zeminEtuduHarciTutar;
        
        const muteahhitlikSozlesmesiBedeli = userProjectInfos.muteahhitlikSozlesmesi;
        if(Array.isArray(muteahhitlikSozlesmesiBedeli) && muteahhitlikSozlesmesiBedeli.length > 0){
          muteahhitlikSozlesmesiBedeli.forEach(element => {
            muteahhitlikSozlesmesiTutar += parseInt(element.toplamTutar);
          });
        }
        const vekaletSozlesmesiBedeli = userProjectInfos.vekaletSozlesmesi;
        if(Array.isArray(vekaletSozlesmesiBedeli) && vekaletSozlesmesiBedeli.length > 0){
          vekaletSozlesmesiBedeli.forEach(element => {
            vekaletSozlesmesiTutar += parseInt(element.toplamTutar);
          });
        }
        noterGiderleriToplam = muteahhitlikSozlesmesiTutar+vekaletSozlesmesiTutar;


        const yapiDenetimHarciBedeli = userProjectInfos.yapiDenetimHarci;
        if(Array.isArray(yapiDenetimHarciBedeli) && yapiDenetimHarciBedeli.length > 0){
          yapiDenetimHarciBedeli.forEach(element => {
            yapiDenetimHarciTutar += parseInt(element.toplamTutar);
          });
        }
        const fenniJeolojiBedeli = userProjectInfos.fenniJeoloji;
        if(Array.isArray(fenniJeolojiBedeli) && fenniJeolojiBedeli.length > 0){
          fenniJeolojiBedeli.forEach(element => {
            fenniJeolojiTutar += parseInt(element.toplamTutar);
          });
        }
        const fenniHaritaciBedeli = userProjectInfos.fenniHaritaci;
        if(Array.isArray(fenniHaritaciBedeli) && fenniHaritaciBedeli.length > 0){
          fenniHaritaciBedeli.forEach(element => {
            fenniHaritaciTutar += parseInt(element.toplamTutar);
          });
        }
        yapiDenetimToplam = yapiDenetimHarciTutar+fenniJeolojiTutar+fenniHaritaciTutar;

        const zeminEtuduRaporuBedeli = userProjectInfos.zeminEtuduRaporu;
        if(Array.isArray(zeminEtuduRaporuBedeli) && zeminEtuduRaporuBedeli.length > 0){
          zeminEtuduRaporuBedeli.forEach(element => {
            zeminEtuduRaporuTutar += parseInt(element.toplamTutar);
          });
        }
        const zeminIyilestirmeBedeli = userProjectInfos.zeminIyilestirme;
        if(Array.isArray(zeminIyilestirmeBedeli) && zeminIyilestirmeBedeli.length > 0){
          zeminIyilestirmeBedeli.forEach(element => {
            zeminIyilestirmeTutar += parseInt(element.toplamTutar);
          });
        }
        zeminEtuduToplam = zeminEtuduRaporuTutar+zeminIyilestirmeTutar;

        const mimariBedeli = userProjectInfos.mimariProje;
        if(Array.isArray(mimariBedeli) && mimariBedeli.length > 0){
          mimariBedeli.forEach(element => {
            mimariTutar += parseInt(element.toplamTutar);
          });
        }
        const statikBedeli = userProjectInfos.statikProje;
        if(Array.isArray(statikBedeli) && statikBedeli.length > 0){
          statikBedeli.forEach(element => {
            statikTutar += parseInt(element.toplamTutar);
          });
        }
        const tesisatBedeli = userProjectInfos.tesisatProje;
        if(Array.isArray(tesisatBedeli) && tesisatBedeli.length > 0){
          tesisatBedeli.forEach(element => {
            tesisatTutar += parseInt(element.toplamTutar);
          });
        }
        const hesBedeli = userProjectInfos.hesProje;
        if(Array.isArray(hesBedeli) && hesBedeli.length > 0){
          hesBedeli.forEach(element => {
            hesTutar += parseInt(element.toplamTutar);
          });
        }
        const akustikBedeli = userProjectInfos.akustikProje;
        if(Array.isArray(akustikBedeli) && akustikBedeli.length > 0){
          akustikBedeli.forEach(element => {
            hesTutar += parseInt(element.toplamTutar);
          });
        }
        projelerToplam = mimariTutar+statikTutar+tesisatTutar+hesTutar+akustikTutar;

        const kadastroBedeli = userProjectInfos.kadastroTutar;
        if(Array.isArray(kadastroBedeli) && kadastroBedeli.length > 0){
          kadastroBedeli.forEach(element => {
            kadastroToplam += parseInt(element.toplamTutar);
          });
        }

        const tapuBedeli = userProjectInfos.tapuTutar;
        if(Array.isArray(tapuBedeli) && tapuBedeli.length > 0){
          tapuBedeli.forEach(element => {
            tapuToplam += parseInt(element.toplamTutar);
          });
        }

        const vergiBedeli = userProjectInfos.vergiTutar;
        if(Array.isArray(vergiBedeli) && vergiBedeli.length > 0){
          vergiBedeli.forEach(element => {
            vergiToplam += parseInt(element.toplamTutar);
          });
        }

        const sskBedeli = userProjectInfos.sskTutar;
        if(Array.isArray(sskBedeli) && sskBedeli.length > 0){
          sskBedeli.forEach(element => {
            sskToplam += parseInt(element.toplamTutar);
          });
        }

        const avukatBedeli = userProjectInfos.avukat;
        if(Array.isArray(avukatBedeli) && avukatBedeli.length > 0){
          avukatBedeli.forEach(element => {
            avukatToplam += parseInt(element.toplamTutar);
          });
        }

        const emlakciBedeli = userProjectInfos.emlakci;
        if(Array.isArray(emlakciBedeli) && emlakciBedeli.length > 0){
          emlakciBedeli.forEach(element => {
            emlakciToplam += parseInt(element.toplamTutar);
          });
        }

        const reklamBedeli = userProjectInfos.reklam;
        if(Array.isArray(reklamBedeli) && reklamBedeli.length > 0){
          reklamBedeli.forEach(element => {
            reklamToplam += parseInt(element.toplamTutar);
          });
        }

        evrakToplam = belediyeGiderleriToplam + noterGiderleriToplam + yapiDenetimToplam + zeminEtuduToplam 
                    + projelerToplam + kadastroToplam + tapuToplam + vergiToplam + sskToplam + avukatToplam 
                    + emlakciToplam + reklamToplam;

        
        const kalipIsciligiBedeli = userProjectInfos.kalipIsciligi;
        if(Array.isArray(kalipIsciligiBedeli) && kalipIsciligiBedeli.length > 0){
          kalipIsciligiBedeli.forEach(element => {
            kalipIsciligiToplam += parseInt(element.toplamTutar);
          });
        }

        const demirIsciligiBedeli = userProjectInfos.demirIsciligi;
        if(Array.isArray(demirIsciligiBedeli) && demirIsciligiBedeli.length > 0){
          demirIsciligiBedeli.forEach(element => {
            demirIsciligiToplam += parseInt(element.toplamTutar);
          });
        }

        const duvarOrmeIsciligiBedeli = userProjectInfos.duvarOrmeIsciligi;
        if(Array.isArray(duvarOrmeIsciligiBedeli) && duvarOrmeIsciligiBedeli.length > 0){
          duvarOrmeIsciligiBedeli.forEach(element => {
            duvarOrmeIsciligiToplam += parseInt(element.toplamTutar);
          });
        }

        const sivaIsciligiBedeli = userProjectInfos.sivaIsciligi;
        if(Array.isArray(sivaIsciligiBedeli) && sivaIsciligiBedeli.length > 0){
          sivaIsciligiBedeli.forEach(element => {
            sivaIsciligiToplam += parseInt(element.toplamTutar);
          });
        }

        const sapIsciligiBedeli = userProjectInfos.sapIsciligi;
        if(Array.isArray(sapIsciligiBedeli) && sapIsciligiBedeli.length > 0){
          sapIsciligiBedeli.forEach(element => {
            sapIsciligiToplam += parseInt(element.toplamTutar);
          });
        }

        const catiIsciligiBedeli = userProjectInfos.catiIsciligi;
        if(Array.isArray(catiIsciligiBedeli) && catiIsciligiBedeli.length > 0){
          catiIsciligiBedeli.forEach(element => {
            catiIsciligiToplam += parseInt(element.toplamTutar);
          });
        }

        const mantolamaIsciligiBedeli = userProjectInfos.mantolamaIsciligi;
        if(Array.isArray(mantolamaIsciligiBedeli) && mantolamaIsciligiBedeli.length > 0){
          mantolamaIsciligiBedeli.forEach(element => {
            mantolamaIsciligiToplam += parseInt(element.toplamTutar);
          });
        }

        const yalitimIsciligiBedeli = userProjectInfos.yalitimIsciligi;
        if(Array.isArray(yalitimIsciligiBedeli) && yalitimIsciligiBedeli.length > 0){
          yalitimIsciligiBedeli.forEach(element => {
            yalitimIsciligiToplam += parseInt(element.toplamTutar);
          });
        }

        const suTesisatiIsciligiBedeli = userProjectInfos.suTesisatiIsciligi;
        if(Array.isArray(suTesisatiIsciligiBedeli) && suTesisatiIsciligiBedeli.length > 0){
          suTesisatiIsciligiBedeli.forEach(element => {
            suTesisatiIsciligiToplam += parseInt(element.toplamTutar);
          });
        }

        const elektrikIsciligiBedeli = userProjectInfos.elektrikIsciligi;
        if(Array.isArray(elektrikIsciligiBedeli) && elektrikIsciligiBedeli.length > 0){
          elektrikIsciligiBedeli.forEach(element => {
            elektrikIsciligiToplam += parseInt(element.toplamTutar);
          });
        }

        const dogalgazIsciligiBedeli = userProjectInfos.dogalgazIsciligi;
        if(Array.isArray(dogalgazIsciligiBedeli) && dogalgazIsciligiBedeli.length > 0){
          dogalgazIsciligiBedeli.forEach(element => {
            dogalgazIsciligiToplam += parseInt(element.toplamTutar);
          });
        }

        const asansorIsciligiBedeli = userProjectInfos.asansorIsciligi;
        if(Array.isArray(asansorIsciligiBedeli) && asansorIsciligiBedeli.length > 0){
          asansorIsciligiBedeli.forEach(element => {
            asansorIsciligiToplam += parseInt(element.toplamTutar);
          });
        }

        const dekorAlcipanIsciligiBedeli = userProjectInfos.dekorAlcipanIsciligi;
        if(Array.isArray(dekorAlcipanIsciligiBedeli) && dekorAlcipanIsciligiBedeli.length > 0){
          dekorAlcipanIsciligiBedeli.forEach(element => {
            dekorAlcipanIsciligiToplam += parseInt(element.toplamTutar);
          });
        }

        const perforjeIsciligiBedeli = userProjectInfos.perforjeIsciligi;
        if(Array.isArray(perforjeIsciligiBedeli) && perforjeIsciligiBedeli.length > 0){
          perforjeIsciligiBedeli.forEach(element => {
            perforjeIsciligiToplam += parseInt(element.toplamTutar);
          });
        }

        const digerIsciligiBedeli = userProjectInfos.digerIsciligi;
        if(Array.isArray(digerIsciligiBedeli) && digerIsciligiBedeli.length > 0){
          digerIsciligiBedeli.forEach(element => {
            digerIsciligiToplam += parseInt(element.toplamTutar);
          });
        }

        isciliklerToplam = kalipIsciligiToplam + demirIsciligiToplam + duvarOrmeIsciligiToplam + sivaIsciligiToplam +sapIsciligiToplam
                        + catiIsciligiToplam + mantolamaIsciligiToplam + yalitimIsciligiToplam + suTesisatiIsciligiToplam 
                        + elektrikIsciligiToplam + dogalgazIsciligiToplam + asansorIsciligiToplam + dekorAlcipanIsciligiToplam
                        + perforjeIsciligiToplam + digerIsciligiToplam;

        const santiyeKurmaBedeli = userProjectInfos.santiyeKurma;
        if(Array.isArray(santiyeKurmaBedeli) && santiyeKurmaBedeli.length > 0){
          santiyeKurmaBedeli.forEach(element => {
            if(element.kalemId === "citleme"){
              citlemeTutar += element.toplamTutar;
            } else if(element.kalemId === "nizamiye"){
              nizamiyeTutar += element.toplamTutar;
            } else if(element.kalemId === "konteyner_ofis"){
              konteyner_ofisTutar += element.toplamTutar;
            } else if(element.kalemId === "konteyner_yemek"){
              konteyner_yemekTutar += element.toplamTutar;
            } else if(element.kalemId === "konteyner_wc"){
              konteyner_wcTutar += element.toplamTutar;
            } else if(element.kalemId === "elektrik"){
              elektrikTutar += element.toplamTutar;
            } else if(element.kalemId === "su"){
              suTutar += element.toplamTutar;
            } else if(element.kalemId === "zemin_betonu"){
              zemin_betonuTutar += element.toplamTutar;
            } else if(element.kalemId === "depo"){
              depoTutar += element.toplamTutar;
            } else if(element.kalemId === "jenerator"){
              jeneratorTutar += element.toplamTutar;
            } else if(element.kalemId === "su_deposu"){
              su_deposuTutar += element.toplamTutar;
            } else if(element.kalemId === "aydinlatma"){
              aydinlatmaTutar += element.toplamTutar;
            } else if(element.kalemId === "camasirhane"){
              camasirhaneTutar += element.toplamTutar;
            } else if(element.kalemId === "guvenlik_kamera"){
              guvenlik_kameraTutar += element.toplamTutar;
            } else if(element.kalemId === "yangin"){
              yanginTutar += element.toplamTutar;
            } else if(element.kalemId === "ilk_yardim"){
              ilk_yardimTutar += element.toplamTutar;
            } else if(element.kalemId === "tasinim"){
              tasinimTutar += element.toplamTutar;
            } else if(element.kalemId === "iskele"){
              iskeleTutar += element.toplamTutar;
            } else if(element.kalemId === "diger"){
              digerSantiyeTutar += element.toplamTutar;
            }
          });
        }
        santiyeKurmaToplam = citlemeTutar+nizamiyeTutar+konteyner_ofisTutar+konteyner_yemekTutar+konteyner_wcTutar+elektrikTutar
                            +suTutar+zemin_betonuTutar+depoTutar+jeneratorTutar+su_deposuTutar+aydinlatmaTutar+camasirhaneTutar
                            +guvenlik_kameraTutar+yanginTutar+ilk_yardimTutar+tasinimTutar+iskeleTutar+digerSantiyeTutar;

        const temelKazmaBedeli = userProjectInfos.temelKazma;
        if(Array.isArray(temelKazmaBedeli) && temelKazmaBedeli.length > 0){
          temelKazmaBedeli.forEach(element => {
            if(element.kalemId === "kazi_yapimi"){
              kazi_yapimiTutar += element.toplamTutar;
            } else if(element.kalemId === "makine_kiralama"){
              makine_kiralamaTutar += element.toplamTutar;
            } else if(element.kalemId === "yukleme"){
              yuklemeTutar += element.toplamTutar;
            } else if(element.kalemId === "tasima"){
              tasimaTutar += element.toplamTutar;
            } else if(element.kalemId === "tesviye"){
              tesviyeTutar += element.toplamTutar;
            } else if(element.kalemId === "iksa"){
              iksaTutar += element.toplamTutar;
            } else if(element.kalemId === "drenaj"){
              drenajTutar += element.toplamTutar;
            } else if(element.kalemId === "su_indirimi"){
              su_indirimiTutar += element.toplamTutar;
            } else if(element.kalemId === "hafriyat_depolama"){
              hafriyat_depolamaTutar += element.toplamTutar;
            } else if(element.kalemId === "elle_kazi"){
              elle_kaziTutar += element.toplamTutar;
            } else if(element.kalemId === "kaba_kazi"){
              kaba_kaziTutar += element.toplamTutar;
            } else if(element.kalemId === "ince_kazi"){
              ince_kaziTutar += element.toplamTutar;
            } else if(element.kalemId === "patlatma"){
              patlatmaTutar += element.toplamTutar;
            } else if(element.kalemId === "kontrolluk"){
              kontrollukTutar += element.toplamTutar;
            } else if(element.kalemId === "zemin_test"){
              zemin_testTutar += element.toplamTutar;
            } else if(element.kalemId === "gecici_yol"){
              gecici_yolTutar += element.toplamTutar;
            } else if(element.kalemId === "guvenlik"){
              guvenlikTutar += element.toplamTutar;
            } else if(element.kalemId === "diger"){
              digertemelKazmaTutar += element.toplamTutar;
            }
          });
        }
        temelKazmaToplam = kazi_yapimiTutar + makine_kiralamaTutar + yuklemeTutar + tasimaTutar + tesviyeTutar + iksaTutar +
                          drenajTutar + su_indirimiTutar + hafriyat_depolamaTutar + elle_kaziTutar + kaba_kaziTutar + ince_kaziTutar +
                          patlatmaTutar + kontrollukTutar + zemin_testTutar + gecici_yolTutar + guvenlikTutar + digertemelKazmaTutar;

        const groBetonBedeli = userProjectInfos.groBeton;
        if(Array.isArray(groBetonBedeli) && groBetonBedeli.length > 0){
          groBetonBedeli.forEach(element => {
            if(element.kalemId === "alan_hazirligi"){
              alan_hazirligiTutar += element.toplamTutar;
            } else if(element.kalemId === "kalip"){
              kalipTutar += element.toplamTutar;
            } else if(element.kalemId === "beton_temini"){
              beton_teminiTutar += element.toplamTutar;
            } else if(element.kalemId === "gro_beton_serme"){
              gro_beton_sermeTutar += element.toplamTutar;
            } else if(element.kalemId === "tesviye"){
              tesviyeGroTutar += element.toplamTutar;
            } else if(element.kalemId === "sikistirma"){
              sikistirmaTutar += element.toplamTutar;
            } else if(element.kalemId === "bakim"){
              bakimTutar += element.toplamTutar;
            } else if(element.kalemId === "numune"){
              numuneTutar += element.toplamTutar;
            } else if(element.kalemId === "temizlik"){
              temizlikTutar += element.toplamTutar;
            } else if(element.kalemId === "diger"){
              digerGroTutar += element.toplamTutar;
            }
          });
        }
        groBetonToplam = alan_hazirligiTutar + kalipTutar + beton_teminiTutar + gro_beton_sermeTutar + tesviyeGroTutar + sikistirmaTutar
                        + bakimTutar + numuneTutar + temizlikTutar + digerGroTutar;

        const radyalTemelBedeli = userProjectInfos.radyalTemel;
        if(Array.isArray(radyalTemelBedeli) && radyalTemelBedeli.length > 0){
          radyalTemelBedeli.forEach(element => {
            if(element.kalemId === "demir"){
              demirTutar += element.toplamTutar;
            } else if(element.kalemId === "beton"){
              betonTutar += element.toplamTutar;
            } else if(element.kalemId === "tel"){
              telTutar += element.toplamTutar;
            } else if(element.kalemId === "civi"){
              civiTutar += element.toplamTutar;
            } else if(element.kalemId === "diger"){
              digerRadyalTemelTutar += element.toplamTutar;
            }
          });
        }
        radyalTemelToplam = demirTutar + betonTutar + telTutar + civiTutar + digerRadyalTemelTutar;

        const perdeBetonuBedeli = userProjectInfos.perdeBetonu;
        if(Array.isArray(perdeBetonuBedeli) && perdeBetonuBedeli.length > 0){
          perdeBetonuBedeli.forEach(element => {
            if(element.kalemId === "demir"){
              demirPerdeBetonuTutar += element.toplamTutar;
            } else if(element.kalemId === "beton"){
              betonPerdeBetonuTutar += element.toplamTutar;
            } else if(element.kalemId === "tel"){
              telperdeBetonuTutar += element.toplamTutar;
            } else if(element.kalemId === "civi"){
              civiPerdeBetonuTutar += element.toplamTutar;
            } else if(element.kalemId === "diger"){
              digerPerdeBetonuTutar += element.toplamTutar;
            }
          });
        }
        perdeBetonuToplam = demirPerdeBetonuTutar + betonPerdeBetonuTutar + telperdeBetonuTutar + civiPerdeBetonuTutar + digerPerdeBetonuTutar;

        const temelIzalasyonuBedeli = userProjectInfos.temelIzolasyon;
        if(Array.isArray(temelIzalasyonuBedeli) && temelIzalasyonuBedeli.length > 0){
          temelIzalasyonuBedeli.forEach(element => {
            if(element.kalemId === "su_tutucu_bant"){
              su_tutucu_bantTutar += element.toplamTutar;
            } else if(element.kalemId === "mebran"){
              mebranTutar += element.toplamTutar;
            } else if(element.kalemId === "likit_mebran"){
              likit_mebranTutar += element.toplamTutar;
            } else if(element.kalemId === "drenaj_levhasi"){
              drenaj_levhasiTutar += element.toplamTutar;
            } else if(element.kalemId === "diger"){
              digerPerdeBetonuTutar += element.toplamTutar;
            }
          });
        }
        temelIzalasyonuToplam = su_tutucu_bantTutar + mebranTutar + likit_mebranTutar + drenaj_levhasiTutar;

        const dolguBedeli = userProjectInfos.dolgu;
        if(Array.isArray(dolguBedeli) && dolguBedeli.length > 0){
          dolguBedeli.forEach(element => {
            if(element.kalemId === "malzeme_temini"){
              malzeme_teminiTutar += element.toplamTutar;
            } else if(element.kalemId === "alan_hazirligi"){
              alan_hazirligiDolguTutar += element.toplamTutar;
            } else if(element.kalemId === "serme"){
              sermeTutar += element.toplamTutar;
            } else if(element.kalemId === "sikistirma"){
              sikistirmaDolguTutar += element.toplamTutar;
            } else if(element.kalemId === "nemlendirme"){
              nemlendirmeTutar += element.toplamTutar;
            } else if(element.kalemId === "seviye_kontrol"){
              seviye_kontrolTutar += element.toplamTutar;
            } else if(element.kalemId === "numune"){
              numuneDolguTutar += element.toplamTutar;
            } else if(element.kalemId === "gecici_yol"){
              gecici_yolDolguTutar += element.toplamTutar;
            } else if(element.kalemId === "atik_tasima"){
              atik_tasimaTutar += element.toplamTutar;
            } else if(element.kalemId === "drenaj"){
              drenajDolguTutar += element.toplamTutar;
            }  else if(element.kalemId === "diger"){
              digerDolguTutar += element.toplamTutar;
            }
          });
        }
        dolguToplam = malzeme_teminiTutar + alan_hazirligiDolguTutar + sermeTutar + sikistirmaDolguTutar + nemlendirmeTutar + seviye_kontrolTutar
                    + numuneDolguTutar + gecici_yolDolguTutar + atik_tasimaTutar + drenajDolguTutar + digerDolguTutar;

        const subasmanBedeli = userProjectInfos.subasman;
        if(Array.isArray(subasmanBedeli) && subasmanBedeli.length > 0){
          subasmanBedeli.forEach(element => {
            if(element.kalemId === "celik_hasir"){
              celik_hasirTutar += element.toplamTutar;
            } else if(element.kalemId === "beton"){
              betonSubasmanTutar += element.toplamTutar;
            } else if(element.kalemId === "diger"){
              digerSubasmanTutar += element.toplamTutar;
            }
          });
        }
        suBasmanToplam = celik_hasirTutar + betonSubasmanTutar + digerSubasmanTutar;

        const zeminBetonuBedeli = userProjectInfos.zeminBetonu;
        if(Array.isArray(zeminBetonuBedeli) && zeminBetonuBedeli.length > 0){
          zeminBetonuBedeli.forEach(element => {
            if(element.kalemId === "demir"){
              demirZeminBetonuTutar += element.toplamTutar;
            } else if(element.kalemId === "beton"){
              betonZeminBetonuTutar += element.toplamTutar;
            } else if(element.kalemId === "tel"){
              telZeminBetonuTutar += element.toplamTutar;
            } else if(element.kalemId === "civi"){
              civiZeminBetonuTutar += element.toplamTutar;
            } else if(element.kalemId === "diger"){
              digerZeminBetonuTutar += element.toplamTutar;
            }
          });
        }
        zeminBetonuToplam = demirZeminBetonuTutar + betonZeminBetonuTutar + telZeminBetonuTutar + civiZeminBetonuTutar + digerZeminBetonuTutar;
        
        const katBetonlariBedeli = userProjectInfos.katBetonlari;
        if(Array.isArray(katBetonlariBedeli) && katBetonlariBedeli.length > 0){
          katBetonlariBedeli.forEach(element => {
            if(element.kalemId === "demir"){
              demirkatBetonlariTutar += element.toplamTutar;
            } else if(element.kalemId === "beton"){
              betonkatBetonlariTutar += element.toplamTutar;
            } else if(element.kalemId === "tel"){
              telkatBetonlariTutar += element.toplamTutar;
            } else if(element.kalemId === "civi"){
              civikatBetonlariTutar += element.toplamTutar;
            } else if(element.kalemId === "diger"){
              digerkatBetonlariTutar += element.toplamTutar;
            }
          });
        }
        katBetonlariToplam = demirkatBetonlariTutar + betonkatBetonlariTutar + telkatBetonlariTutar + civikatBetonlariTutar + digerkatBetonlariTutar;

        const kapamaBetonuBedeli = userProjectInfos.kapamaBetonu;
        if(Array.isArray(kapamaBetonuBedeli) && kapamaBetonuBedeli.length > 0){
          kapamaBetonuBedeli.forEach(element => {
            if(element.kalemId === "demir"){
              demirkapamaBetonuTutar += element.toplamTutar;
            } else if(element.kalemId === "beton"){
              betonkapamaBetonuTutar += element.toplamTutar;
            } else if(element.kalemId === "tel"){
              telkapamaBetonuTutar += element.toplamTutar;
            } else if(element.kalemId === "civi"){
              civikapamaBetonuTutar += element.toplamTutar;
            } else if(element.kalemId === "diger"){
              digerkapamaBetonuTutar += element.toplamTutar;
            }
          });
        }
        kapamaBetonuToplam = demirkapamaBetonuTutar + betonkapamaBetonuTutar + telkapamaBetonuTutar + civikapamaBetonuTutar + digerkapamaBetonuTutar;

        const catiUygulamaBedeli = userProjectInfos.catiUygulama;
        if(Array.isArray(catiUygulamaBedeli) && catiUygulamaBedeli.length > 0){
          catiUygulamaBedeli.forEach(element => {
            if(element.kalemId === "kereste"){
              keresteTutar += element.toplamTutar;
            } else if(element.kalemId === "osb"){
              osbTutar += element.toplamTutar;
            } else if(element.kalemId === "cati_izalasyonu"){
              cati_izalasyonuTutar += element.toplamTutar;
            } else if(element.kalemId === "kiremit"){
              kiremitTutar += element.toplamTutar;
            } else if(element.kalemId === "diger"){
              digercatiUygulamaTutar += element.toplamTutar;
            }
          });
        }
        catiUygulamaToplam = keresteTutar + osbTutar + cati_izalasyonuTutar + kiremitTutar + digercatiUygulamaTutar;

        const duvarOrmeBedeli = userProjectInfos.duvarOrme;
        if(Array.isArray(duvarOrmeBedeli) && duvarOrmeBedeli.length > 0){
          duvarOrmeBedeli.forEach(element => {
            if(element.kalemId === "cimento"){
              cimentoTutar += element.toplamTutar;
            } else if(element.kalemId === "duvar_blogu"){
              duvar_bloguTutar += element.toplamTutar;
            } else if(element.kalemId === "kirec"){
              kirecTutar += element.toplamTutar;
            } else if(element.kalemId === "kum_cakil"){
              kum_cakilTutar += element.toplamTutar;
            } else if(element.kalemId === "diger"){
              digerduvarOrmeTutar += element.toplamTutar;
            }
          });
        }
        duvarOrmeToplam = cimentoTutar + duvar_bloguTutar + kirecTutar + kum_cakilTutar + digerduvarOrmeTutar;

        const sapBedeli = userProjectInfos.sap;
        if(Array.isArray(sapBedeli) && sapBedeli.length > 0){
          sapBedeli.forEach(element => {
            if(element.kalemId === "kum"){
              kumTutar += element.toplamTutar;
            } else if(element.kalemId === "cimento"){
              cimentoSapTutar += element.toplamTutar;
            } else if(element.kalemId === "diger"){
              digerSapTutar += element.toplamTutar;
            }
          });
        }
        sapToplam = kumTutar + cimentoSapTutar + digerSapTutar;

        kabaToplam = santiyeKurmaToplam+temelKazmaToplam+groBetonToplam+radyalTemelToplam+perdeBetonuToplam+temelIzalasyonuToplam
                    +dolguToplam+suBasmanToplam+zeminBetonuToplam+katBetonlariToplam+kapamaBetonuToplam+catiUygulamaToplam
                    +duvarOrmeToplam+sapToplam;


        const zeminUygulamalariBedeli = userProjectInfos.zeminUygulamalari;
        if(Array.isArray(zeminUygulamalariBedeli) && zeminUygulamalariBedeli.length > 0){
          zeminUygulamalariBedeli.forEach(element => {
            if(element.kalemId === "seramik"){
              seramikTutar += element.toplamTutar;
            } else if(element.kalemId === "parke"){
              parkeTutar += element.toplamTutar;
            } else if(element.kalemId === "mermer"){
              mermerTutar += element.toplamTutar;
            } else if(element.kalemId === "zeminBoyasi"){
              zeminBoyasiTutar += element.toplamTutar;
            } else if(element.kalemId === "epoksi"){
              epoksiTutar += element.toplamTutar;
            } else if(element.kalemId === "diger"){
              digerZeminUygulamalariTutar += element.toplamTutar;
            }
          });
        }
        zeminUygulamalariToplam = seramikTutar + parkeTutar + mermerTutar + zeminBoyasiTutar + epoksiTutar + digerZeminUygulamalariTutar;

        const icCepheBedeli = userProjectInfos.icCephe;
        if(Array.isArray(icCepheBedeli) && icCepheBedeli.length > 0){
          icCepheBedeli.forEach(element => {
            if(element.kalemId === "korKasa"){
              korKasaTutar += element.toplamTutar;
            } else if(element.kalemId === "kosebent"){
              kosebentTutar += element.toplamTutar;
            } else if(element.kalemId === "betonAstari"){
              betonAstariTutar += element.toplamTutar;
            } else if(element.kalemId === "alci"){
              alciTutar += element.toplamTutar;
            } else if(element.kalemId === "cimento"){
              cimentoIcCepheTutar += element.toplamTutar;
            } else if(element.kalemId === "kum"){
              kumIcCepheTutar += element.toplamTutar;
            } else if(element.kalemId === "hazirSivaIc"){
              hazirSivaIcTutar += element.toplamTutar;
            } else if(element.kalemId === "icCepheBoyasi"){
              icCepheBoyasiTutar += element.toplamTutar;
            } else if(element.kalemId === "boyaAstari"){
              boyaAstariTutar += element.toplamTutar;
            } else if(element.kalemId === "diger"){
              digerIcCepheTutar += element.toplamTutar;
            }
          });
        }
        icCepheToplam = korKasaTutar + kosebentTutar + betonAstariTutar + alciTutar + cimentoIcCepheTutar + kumIcCepheTutar
                      + hazirSivaIcTutar + icCepheBoyasiTutar + boyaAstariTutar + digerIcCepheTutar;

        const islakMekanlarBedeli = userProjectInfos.islakMekanlar;
        if(Array.isArray(islakMekanlarBedeli) && islakMekanlarBedeli.length > 0){
          islakMekanlarBedeli.forEach(element => {
            if(element.kalemId === "zeminYalitimi"){
              zeminYalitimiTutar += element.toplamTutar;
            } else if(element.kalemId === "seramikFayans"){
              seramikFayansTutar += element.toplamTutar;
            } else if(element.kalemId === "klozetler"){
              klozetlerTutar += element.toplamTutar;
            } else if(element.kalemId === "lavabolar"){
              lavabolarTutar += element.toplamTutar;
            } else if(element.kalemId === "banyoDolabi"){
              banyoDolabiTutar += element.toplamTutar;
            } else if(element.kalemId === "dusTeknesi"){
              dusTeknesiTutar += element.toplamTutar;
            } else if(element.kalemId === "banyoBataryasi"){
              banyoBataryasiTutar += element.toplamTutar;
            } else if(element.kalemId === "lavaboBataryasi"){
              lavaboBataryasiTutar += element.toplamTutar;
            } else if(element.kalemId === "diger"){
              digerIslakMekanlarTutar += element.toplamTutar;
            }
          });
        }
        islakMekanlarToplam = zeminYalitimiTutar + seramikFayansTutar + klozetlerTutar + lavabolarTutar + banyoDolabiTutar
                            + dusTeknesiTutar + banyoBataryasiTutar + lavaboBataryasiTutar + digerIslakMekanlarTutar;
        
        const mutfakBedeli = userProjectInfos.mutfak;
        if(Array.isArray(mutfakBedeli) && mutfakBedeli.length > 0){
          mutfakBedeli.forEach(element => {
            if(element.kalemId === "tezgah"){
              tezgahTutar += element.toplamTutar;
            } else if(element.kalemId === "mutfakEvye"){
              mutfakEvyeTutar += element.toplamTutar;
            } else if(element.kalemId === "mutfakDolabi"){
              mutfakDolabiTutar += element.toplamTutar;
            } else if(element.kalemId === "mutfakBataryasi"){
              mutfakBataryasiTutar += element.toplamTutar;
            } else if(element.kalemId === "ankastre"){
              ankastreTutar += element.toplamTutar;
            } else if(element.kalemId === "diger"){
              digerMutfakTutar += element.toplamTutar;
            }
          });
        }
        mutfakToplam = tezgahTutar + mutfakEvyeTutar + mutfakDolabiTutar + mutfakBataryasiTutar + ankastreTutar + digerMutfakTutar;

        const pimapenBedeli = userProjectInfos.pimapen;
        if(Array.isArray(pimapenBedeli) && pimapenBedeli.length > 0){
          pimapenBedeli.forEach(element => {
            if(element.kalemId === "pencereler"){
              pencerelerTutar += element.toplamTutar;
            } else if(element.kalemId === "zeminDograma"){
              zeminDogramaTutar += element.toplamTutar;
            } else if(element.kalemId === "diger"){
              digerPimapenTutar += element.toplamTutar;
            }
          });
        }
        pimapenToplam = pencerelerTutar + zeminDogramaTutar + digerPimapenTutar;

        const kapilarBedeli = userProjectInfos.kapilar;
        if(Array.isArray(kapilarBedeli) && kapilarBedeli.length > 0){
          kapilarBedeli.forEach(element => {
            if(element.kalemId === "odaKapilari"){
              odaKapilariTutar += element.toplamTutar;
            } else if(element.kalemId === "celikKapilar"){
              celikKapilarTutar += element.toplamTutar;
            } else if(element.kalemId === "diger"){
              digerKapilarTutar += element.toplamTutar;
            }
          });
        }
        kapilarToplam = odaKapilariTutar + celikKapilarTutar + digerKapilarTutar;

        const korkuluklarBedeli = userProjectInfos.korkuluklar;
        if(Array.isArray(korkuluklarBedeli) && korkuluklarBedeli.length > 0){
          korkuluklarBedeli.forEach(element => {
            if(element.kalemId === "balkon"){
              balkonTutar += element.toplamTutar;
            } else if(element.kalemId === "merdiven"){
              merdivenTutar += element.toplamTutar;
            } else if(element.kalemId === "diger"){
              digerKorkuluklarTutar += element.toplamTutar;
            }
          });
        }
        korkuluklarToplam = balkonTutar + merdivenTutar + digerKorkuluklarTutar;

        const disCepheBedeli = userProjectInfos.disCephe;
        if(Array.isArray(disCepheBedeli) && disCepheBedeli.length > 0){
          disCepheBedeli.forEach(element => {
            if(element.kalemId === "hazirSivaDis"){
              hazirSivaDisTutar += element.toplamTutar;
            } else if(element.kalemId === "cimento"){
              cimentoDisCepheTutar += element.toplamTutar;
            } else if(element.kalemId === "kum"){
              kumDisCepheTutar += element.toplamTutar;
            } else if(element.kalemId === "disCepheBoyasi"){
              disCepheBoyasiTutar += element.toplamTutar;
            } else if(element.kalemId === "sove"){
              soveTutar += element.toplamTutar;
            } else if(element.kalemId === "boyaAstari"){
              boyaAstariDisCepheTutar += element.toplamTutar;
            } else if(element.kalemId === "diger"){
              digerDisCepheTutar += element.toplamTutar;
            }
          });
        }
        disCepheToplam = hazirSivaDisTutar + cimentoDisCepheTutar + kumDisCepheTutar + disCepheBoyasiTutar + soveTutar
                      + boyaAstariDisCepheTutar + digerDisCepheTutar;

        const mantolamaBedeli = userProjectInfos.mantolama;
        if(Array.isArray(mantolamaBedeli) && mantolamaBedeli.length > 0){
          mantolamaBedeli.forEach(element => {
            if(element.kalemId === "duvel_montaj"){
              duvel_montajTutar += element.toplamTutar;
            } else if(element.kalemId === "yalitim_levha"){
              yalitim_levhaTutar += element.toplamTutar;
            } else if(element.kalemId === "karbonluEps"){
              karbonluEpsTutar += element.toplamTutar;
            } else if(element.kalemId === "xps"){
              xpsTutar += element.toplamTutar;
            } else if(element.kalemId === "tasYunu"){
              tasYunuTutar += element.toplamTutar;
            } else if(element.kalemId === "file_siva"){
              file_sivaTutar += element.toplamTutar;
            } else if(element.kalemId === "kaplama_siva"){
              kaplama_sivaTutar += element.toplamTutar;
            } else if(element.kalemId === "dekoratif_kaplama"){
              dekoratif_kaplamaTutar += element.toplamTutar;
            } else if(element.kalemId === "diger"){
              digerMantolamaTutar += element.toplamTutar;
            }
          });
        }
        mantolamaToplam = duvel_montajTutar + yalitim_levhaTutar + karbonluEpsTutar + xpsTutar + tasYunuTutar + file_sivaTutar
                        + kaplama_sivaTutar + dekoratif_kaplamaTutar + digerMantolamaTutar;

        const tavanBedeli = userProjectInfos.tavan;
        if(Array.isArray(tavanBedeli) && tavanBedeli.length > 0){
          tavanBedeli.forEach(element => {
            if(element.kalemId === "stropiyer"){
              stropiyerTutar += element.toplamTutar;
            } else if(element.kalemId === "alcipan"){
              alcipanTutar += element.toplamTutar;
            } else if(element.kalemId === "karolem"){
              karolemTutar += element.toplamTutar;
            } else if(element.kalemId === "diger"){
              digerTavanTutar += element.toplamTutar;
            }
          });
        }
        tavanToplam = stropiyerTutar + alcipanTutar + karolemTutar + digerTavanTutar;

        const elektrikTesisatBedeli = userProjectInfos.elektrikTesisat;
        if(Array.isArray(elektrikTesisatBedeli) && elektrikTesisatBedeli.length > 0){
          elektrikTesisatBedeli.forEach(element => {
            if(element.kalemId === "elektrikIsciligi"){
              elektrikIsciligiTutar += element.toplamTutar;
            } else if(element.kalemId === "diger"){
              digerElektrikTutar += element.toplamTutar;
            }
          });
        }
        elektrikTesisatToplam = elektrikIsciligiTutar + digerElektrikTutar;

        const sihhiTesisatBedeli = userProjectInfos.sihhiTesisat;
        if(Array.isArray(sihhiTesisatBedeli) && sihhiTesisatBedeli.length > 0){
          sihhiTesisatBedeli.forEach(element => {
            if(element.kalemId === "pisSu"){
              pisSuTutar += element.toplamTutar;
            } else if(element.kalemId === "temizSu"){
              temizSuTutar += element.toplamTutar;
            } else if(element.kalemId === "isitma"){
              isitmaTutar += element.toplamTutar;
            } else if(element.kalemId === "diger"){
              digerSihhiTesisatTutar += element.toplamTutar;
            }
          });
        }
        sihhiTesisatToplam = pisSuTutar + temizSuTutar + isitmaTutar + digerSihhiTesisatTutar;

        const dogalgazBedeli = userProjectInfos.dogalgaz;
        if(Array.isArray(dogalgazBedeli) && dogalgazBedeli.length > 0){
          dogalgazBedeli.forEach(element => {
            if(element.kalemId === "dogalgazKurulumu"){
              dogalgazKurulumuTutar += element.toplamTutar;
            } else if(element.kalemId === "diger"){
              digerDogalgazTutar += element.toplamTutar;
            }
          });
        }
        dogalgazToplam = dogalgazKurulumuTutar + digerDogalgazTutar;

        const asansorKurulumuBedeli = userProjectInfos.asansorKurulumu;
        if(Array.isArray(asansorKurulumuBedeli) && asansorKurulumuBedeli.length > 0){
          asansorKurulumuBedeli.forEach(element => {
            if(element.kalemId === "asansorKurulumu"){
              asansorKurulumuTutar += element.toplamTutar;
            } else if(element.kalemId === "diger"){
              digerAsansorTutar += element.toplamTutar;
            }
          });
        }
        asansorKurulumuToplam = asansorKurulumuTutar + digerAsansorTutar;

        const iklimlendirmeBedeli = userProjectInfos.iklimlendirme;
        if(Array.isArray(iklimlendirmeBedeli) && iklimlendirmeBedeli.length > 0){
          iklimlendirmeBedeli.forEach(element => {
            if(element.kalemId === "kombi"){
              kombiTutar += element.toplamTutar;
            } else if(element.kalemId === "kombiDolabi"){
              kombiDolabiTutar += element.toplamTutar;
            } else if(element.kalemId === "klima"){
              klimaTutar += element.toplamTutar;
            } else if(element.kalemId === "diger"){
              digerIklimlendirmeTutar += element.toplamTutar;
            }
          });
        }
        iklimlendirmeToplam = kombiTutar + kombiDolabiTutar + klimaTutar + digerIklimlendirmeTutar;

        const peyzajBedeli = userProjectInfos.peyzaj;
        if(Array.isArray(peyzajBedeli) && peyzajBedeli.length > 0){
          peyzajBedeli.forEach(element => {
            if(element.kalemId === "bahceDuvari"){
              bahceDuvariTutar += element.toplamTutar;
            } else if(element.kalemId === "bitkilendirme"){
              bitkilendirmeTutar += element.toplamTutar;
            } else if(element.kalemId === "perforje"){
              perforjeTutar += element.toplamTutar;
            } else if(element.kalemId === "diger"){
              digerPeyzajTutar += element.toplamTutar;
            }
          });
        }
        peyzajToplam = bahceDuvariTutar + bitkilendirmeTutar + perforjeTutar + digerPeyzajTutar;




        inceToplam = zeminUygulamalariToplam + icCepheToplam + islakMekanlarToplam + mutfakToplam + pimapenToplam + kapilarToplam
                    + korkuluklarToplam + disCepheToplam + mantolamaToplam + tavanToplam + elektrikTesisatToplam + sihhiTesisatToplam
                    + dogalgazToplam + asansorKurulumuToplam + iklimlendirmeToplam + peyzajToplam;


        const ruhsatBedeli = userProjectInfos.yapiRuhsati;
        if(Array.isArray(ruhsatBedeli) && ruhsatBedeli.length > 0){
          ruhsatBedeli.forEach(element => {
            ruhsatToplam += element.toplamTutar;
          });
        }


        let materialsList = [];
        const malzemeBedeli = userProjectInfos.materials;
        if(Array.isArray(malzemeBedeli) && malzemeBedeli.length > 0){
          malzemeBedeli.forEach(element => {
            const saves = element.savedResults;
            if(saves.length > 0){
              saves.forEach(item => {
                if(item.from === "malzeme"){
                  const toplamTutar = item.toplamTutar;
                  let name = "";
                  if(element.nameText === ""){
                    name = element.name;
                  } else{
                    name = element.nameText;
                  }
                  const materialDisplayName = materialNames[name] || name;
                  const data = {
                    materialDisplayName,
                    toplamTutar
                  }
                  malzemelerToplam += toplamTutar*1000;
                  materialsList.push(data);
                }
              });
            }
          });
        }
        let materialNamesList = [];
        let materialTutarList = [];
        if(materialsList.length > 0){
          materialsList.forEach(item => {
            materialNamesList.push(item.materialDisplayName);
            materialTutarList.push(item.toplamTutar*1000);
          });
        }


        genelToplam = arsaGiderleriToplam + evrakToplam + ruhsatToplam + kabaToplam + inceToplam + isciliklerToplam + malzemelerToplam
                    - yerSahibiAlinanParaTutar + yerSahibiVerilenParaTutar;

        building = userProjectInfos.building;
        if(building.length > 0){
          building.forEach(element => {
            mKareToplam += parseInt(element.genelBrutAlan);
          });
        }
        mKareToplam -= yerSahibiDaireMetreKare;

        genelToplamText.textContent = formatTL(genelToplam);
        if (mKareToplam > 0) {
          mKareMaliyetText.textContent = formatTL(genelToplam / mKareToplam);
        } else {
          mKareMaliyetText.textContent = "—"; // veya "0 TL", "Bilinmiyor", dilediğin bir şey
        }

        const maliyet = formatTL(genelToplam/mKareToplam);
        const value = parseFloat(maliyet);
        if (isNaN(value)) {
          // Hata mesajı veya önlem
        } else {
          await saveData("metreMaliyet", { metreMaliyeti: value });
        }

        const detailMappings = {
          root: {
            labels: ['Arsa', 'Evrak', 'Ruhsat', 'Kaba', 'İnce', 'İşçilikler', ['Eklenen', 'Malzemeler']],
            data: [arsaGiderleriToplam, evrakToplam, ruhsatToplam, kabaToplam, inceToplam, isciliklerToplam, malzemelerToplam],
            background: [
              'rgba(59, 130, 246, 0.8)',    // Mavi
              'rgba(34, 197, 94, 0.8)',    // Yeşil
              'rgba(177, 98, 28, 0.8)',   // Sarı
              'rgba(239, 68, 68, 0.8)',   //  Kırmızı
              'rgba(251, 146, 60, 0.8)',  // Turuncu
              'rgba(124, 58, 237, 0.8)',   // Tailwind: purple-600
              'rgba(20, 184, 166, 0.8)'     // Teal
            ],
            children: {
              'Arsa': 'arsa',
              'Evrak': 'evrak',
              'Kaba': 'kaba',
              'İnce': 'ince',
              'İşçilikler' : 'iscilikler',
              'Eklenen,Malzemeler' : 'malzemeler'
            }
          },
          arsa: {
            labels: ["Arsa Bedeli", "Yerden Çıkartmak", "Kira Bedeli", "Arsa Diğer"],
            data: [arsaBedeliTutar, yerdenCikartmakTutar, kiraBedeliTutar, arsaDigerTutar],
            background: [
              'rgba(30, 64, 175, 0.8)', 
              'rgba(147, 197, 253, 0.8)',
              'rgba(59,130,246,0.3)',
              'rgba(30, 64, 175, 0.5)'
            ]
          },
          evrak: {
            labels: ["Belediye", "Noter", "Yapı Denetim", "Kadastro", "Zemin Etüdü", "Projeler", "Tapu", "Vergi", "SSK", "Avukat", "Emlakçı", "Reklam"],
            data: [
              belediyeGiderleriToplam, 
              noterGiderleriToplam, 
              yapiDenetimToplam, 
              kadastroToplam, 
              zeminEtuduToplam, 
              projelerToplam,
              tapuToplam,
              vergiToplam,
              sskToplam,
              avukatToplam,
              emlakciToplam,
              reklamToplam
            ],
            background: [
              'rgba(11, 129, 90, 0.8)',
              'rgba(66, 227, 175, 0.8)',
              'rgba(50, 130, 100, 0.8)',
              'rgba(16, 185, 129, 0.4)',
              'rgba(80, 160, 130, 0.5)'
            ],
            children: {
              'Belediye': 'belediye',
              'Noter': 'noter',
              'Yapı Denetim': 'yapidenetim',
              'Kadastro' : 'kadastro',
              'Zemin Etüdü': 'zeminetudu',
              'Projeler': 'projeler',
              'Tapu': 'tapu',
              'Vergi': 'vergi',
              'SSK': 'ssk',
              'Avukat': 'avukat',
              'Emlakçı': 'emlakci',
              'Reklam': 'reklam'
            }
          },
          belediye: {
            labels: ["Aplikasyon", "İmar Durumu", "Kanal Kotu", "Ruhsat Harcı", "Zemin Etüdü Harcı"],
            data: [aplikasyonTutar, imarDurumuTutar, kanalKotuTutar, ruhsatHarciTutar, zeminEtuduHarciTutar],
            background: [
              'rgba(59, 130, 246, 0.7)',
              'rgba(30, 64, 175, 0.7)',
              'rgba(120, 180, 240, 0.7)',
              'rgba(80, 160, 220, 0.7)',
              'rgba(59, 130, 246, 0.4)'
            ]
          },
          noter: {
            labels: ["Müteahhitlik Sözleşmesi", "Vekalet Sözleşmesi"],
            data: [muteahhitlikSozlesmesiTutar, vekaletSozlesmesiTutar],
            background: [
              'rgba(255, 193, 7, 0.8)',
              'rgba(255, 236, 179, 0.8)'
            ]
          },
          yapidenetim: {
            labels: ["Yapı Denetim Harcı", "Fenni Jeoloji", "Fenni Haritacı"],
            data: [yapiDenetimHarciTutar, fenniJeolojiTutar, fenniHaritaciTutar],
            background: [
              'rgba(249, 115, 22, 0.8)',
              'rgba(253, 186, 116, 0.8)',
              'rgba(251, 191, 36, 0.8)'
            ]
          },
          zeminetudu: {
            labels: ["Zemin Etüdü Raporu", "Zemin İyileştirme"],
            data: [zeminEtuduRaporuTutar, zeminIyilestirmeTutar],
            background: [
              'rgba(34,197,94,0.8)', 
              'rgba(132,204,22,0.8)'
            ]
          },
          projeler: {
            labels: ["Mimari", "Statik", "Tesisat", "HES", "Akustik"],
            data: [mimariTutar, statikTutar, tesisatTutar, hesTutar, akustikTutar],
            background: [
              'rgba(30,64,175,0.6)',
              'rgba(59,130,246,0.6)',
              'rgba(16,185,129,0.6)',
              'rgba(250,220,20,0.6)',
              'rgba(239,68,68,0.6)'
            ]
          },
          // ================= KABA ve ALT KALEMLERİ =================
          kaba: {
            labels: [
              "Şantiye Kurma", "Temel Kazma", "Grobeton", "Radyal Temel", "Perde Betonu", "Temel İzolasyonu",
              "Dolgu", "Subasman", "Zemin Betonu", "Kat Betonları", "Kapama Betonu", "Çatı Uygulama", "Duvar Örme + Şap"
            ],
            data: [
              santiyeKurmaToplam, temelKazmaToplam, groBetonToplam, radyalTemelToplam, perdeBetonuToplam, temelIzalasyonuToplam,
              dolguToplam, suBasmanToplam, zeminBetonuToplam, katBetonlariToplam, kapamaBetonuToplam, catiUygulamaToplam, duvarOrmeToplam + sapToplam
            ],
            background: [
              //"#1e3a8a", // koyu mavi
              //"#60a5fa", // açık mavi
              "#2563eb", // normal mavi
              //"#38bdf8", // çok açık/cyan-mavi
              //"#3b82f6", // orta mavi
              "#93c5fd", // pastel açık mavi
              //"#0ea5e9", // açık turkuaz mavi
              //"#bae6fd", // çok çok açık mavi
              //"#1d4ed8", // koyu mavi
              //"#7dd3fc", // açık mavi
              //"#0284c7", // mavi
              //"#0ea5e9", // açık mavi
            ],
            children: {
              "Şantiye Kurma": "santiye_kurma",
              "Temel Kazma": "temel_kazma",
              "Grobeton": "grobeto",
              "Radyal Temel": "radyal_t",
              "Perde Betonu": "perde_betonu",
              "Temel İzolasyonu": "temel_izolasyonu",
              "Dolgu": "dolgu",
              "Subasman": "subasman",
              "Zemin Betonu": "zemin_betonu",
              "Kat Betonları": "kat_betonlari",
              "Kapama Betonu": "kapama_beton",
              "Çatı Uygulama": "cati_uygulama",
              "Duvar Örme + Şap": "duvar_orme_sap"
            }
          },
          santiye_kurma: {
            labels: [
              "Çitleme", "Nizamiye", "Konteyner Ofis", "Konteyner Yemek", "Konteyner WC", "Elektrik",
              "Su", "Zemin Betonu", "Depo", "Jeneratör", "Su Deposu", "Aydınlatma", "Çamaşırhane",
              "Güvenlik Kamerası", "Yangın", "İlk Yardım", "Taşınım", "İskele", "Diğer"
            ],
            data: [
              citlemeTutar, nizamiyeTutar, konteyner_ofisTutar, konteyner_yemekTutar, konteyner_wcTutar, elektrikTutar,
              suTutar, zemin_betonuTutar, depoTutar, jeneratorTutar, su_deposuTutar, aydinlatmaTutar, camasirhaneTutar,
              guvenlik_kameraTutar, yanginTutar, ilk_yardimTutar, tasinimTutar, iskeleTutar, digerSantiyeTutar
            ],
            background: [
              'rgba(34,197,94,0.85)',    // Koyu yeşil
              //'rgba(132,204,22,0.75)',   // Açık yeşil
              //'rgba(74,222,128,0.85)',   // Orta-açık yeşil
              //'rgba(16,185,129,0.75)',   // Turkuaz-yeşil
              'rgba(187,247,208,0.9)'    // En açık yeşil
            ]
          },
          temel_kazma: {
            labels: [
              "Kazı Yapımı", "Makine Kiralama", "Yükleme", "Taşıma", "Tesviye", "İksa", "Drenaj", "Su İndirimi", 
              "Hafriyat Depolama", "Elle Kazı", "Kaba Kazı", "İnce Kazı", "Patlatma", "Kontrollük", "Zemin Test", 
              "Geçici Yol", "Güvenlik", "Diğer"
            ],
            data: [
              kazi_yapimiTutar, makine_kiralamaTutar, yuklemeTutar, tasimaTutar, tesviyeTutar, iksaTutar, 
              drenajTutar, su_indirimiTutar, hafriyat_depolamaTutar, elle_kaziTutar, kaba_kaziTutar, ince_kaziTutar, 
              patlatmaTutar, kontrollukTutar, zemin_testTutar, gecici_yolTutar, guvenlikTutar, digertemelKazmaTutar
            ],
            background: [
              'rgba(34,197,94,0.85)',    // Koyu yeşil
              //'rgba(132,204,22,0.75)',   // Açık yeşil
              //'rgba(74,222,128,0.85)',   // Orta-açık yeşil
              //'rgba(16,185,129,0.75)',   // Turkuaz-yeşil
              'rgba(187,247,208,0.9)'    // En açık yeşil
            ]
          },
          grobeto: {
            labels: [
              "Alan Hazırlığı", "Kalıp", "Beton Temini", "Grobeton Serme", "Tesviye", "Sıkıştırma",
              "Bakım", "Numune", "Temizlik", "Diğer"
            ],
            data: [
              alan_hazirligiTutar, kalipTutar, beton_teminiTutar, gro_beton_sermeTutar, tesviyeGroTutar, sikistirmaTutar,
              bakimTutar, numuneTutar, temizlikTutar, digerGroTutar
            ],
            background: [
              'rgba(34,197,94,0.85)',    // Koyu yeşil
              //'rgba(132,204,22,0.75)',   // Açık yeşil
              //'rgba(74,222,128,0.85)',   // Orta-açık yeşil
              //'rgba(16,185,129,0.75)',   // Turkuaz-yeşil
              'rgba(187,247,208,0.9)'    // En açık yeşil
            ]
          },
          radyal_t: {
            labels: ["Demir", "Beton", "Tel", "Çivi", "Diğer"],
            data: [demirTutar, betonTutar, telTutar, civiTutar, digerRadyalTemelTutar],
            background: [
              'rgba(34,197,94,0.85)',    // Koyu yeşil
              //'rgba(132,204,22,0.75)',   // Açık yeşil
              //'rgba(74,222,128,0.85)',   // Orta-açık yeşil
              //'rgba(16,185,129,0.75)',   // Turkuaz-yeşil
              'rgba(187,247,208,0.9)'    // En açık yeşil
            ]
          },
          perde_betonu: {
            labels: ["Demir", "Beton", "Tel", "Çivi", "Diğer"],
            data: [demirPerdeBetonuTutar, betonPerdeBetonuTutar, telperdeBetonuTutar, civiPerdeBetonuTutar, digerPerdeBetonuTutar],
            background: [
              'rgba(34,197,94,0.85)',    // Koyu yeşil
              //'rgba(132,204,22,0.75)',   // Açık yeşil
              //'rgba(74,222,128,0.85)',   // Orta-açık yeşil
              //'rgba(16,185,129,0.75)',   // Turkuaz-yeşil
              'rgba(187,247,208,0.9)'    // En açık yeşil
            ]
          },
          temel_izolasyonu: {
            labels: ["Su Tutucu Bant", "Membran", "Likit Membran", "Drenaj Levhası"],
            data: [su_tutucu_bantTutar, mebranTutar, likit_mebranTutar, drenaj_levhasiTutar],
            background: [
              'rgba(34,197,94,0.85)',    // Koyu yeşil
              //'rgba(132,204,22,0.75)',   // Açık yeşil
              //'rgba(74,222,128,0.85)',   // Orta-açık yeşil
              //'rgba(16,185,129,0.75)',   // Turkuaz-yeşil
              'rgba(187,247,208,0.9)'    // En açık yeşil
            ]
          },
          dolgu: {
            labels: [
              "Malzeme Temini", "Alan Hazırlığı", "Serme", "Sıkıştırma", "Nemlendirme", "Seviye Kontrol",
              "Numune", "Geçici Yol", "Atık Taşıma", "Drenaj", "Diğer"
            ],
            data: [
              malzeme_teminiTutar, alan_hazirligiDolguTutar, sermeTutar, sikistirmaDolguTutar, nemlendirmeTutar, seviye_kontrolTutar,
              numuneDolguTutar, gecici_yolDolguTutar, atik_tasimaTutar, drenajDolguTutar, digerDolguTutar
            ],
            background: [
              'rgba(34,197,94,0.85)',    // Koyu yeşil
              //'rgba(132,204,22,0.75)',   // Açık yeşil
              //'rgba(74,222,128,0.85)',   // Orta-açık yeşil
              //'rgba(16,185,129,0.75)',   // Turkuaz-yeşil
              'rgba(187,247,208,0.9)'    // En açık yeşil
            ]
          },
          subasman: {
            labels: ["Çelik Hasır", "Beton", "Diğer"],
            data: [celik_hasirTutar, betonSubasmanTutar, digerSubasmanTutar],
            background: [
              'rgba(34,197,94,0.85)',    // Koyu yeşil
              //'rgba(132,204,22,0.75)',   // Açık yeşil
              //'rgba(74,222,128,0.85)',   // Orta-açık yeşil
              //'rgba(16,185,129,0.75)',   // Turkuaz-yeşil
              'rgba(187,247,208,0.9)'    // En açık yeşil
            ]
          },
          zemin_betonu: {
            labels: ["Demir", "Beton", "Tel", "Çivi", "Diğer"],
            data: [demirZeminBetonuTutar, betonZeminBetonuTutar, telZeminBetonuTutar, civiZeminBetonuTutar, digerZeminBetonuTutar],
            background: [
              'rgba(34,197,94,0.85)',    // Koyu yeşil
              //'rgba(132,204,22,0.75)',   // Açık yeşil
              //'rgba(74,222,128,0.85)',   // Orta-açık yeşil
              //'rgba(16,185,129,0.75)',   // Turkuaz-yeşil
              'rgba(187,247,208,0.9)'    // En açık yeşil
            ]
          },
          kat_betonlari: {
            labels: ["Demir", "Beton", "Tel", "Çivi", "Diğer"],
            data: [demirkatBetonlariTutar, betonkatBetonlariTutar, telkatBetonlariTutar, civikatBetonlariTutar, digerkatBetonlariTutar],
            background: [
              'rgba(34,197,94,0.85)',    // Koyu yeşil
              //'rgba(132,204,22,0.75)',   // Açık yeşil
              //'rgba(74,222,128,0.85)',   // Orta-açık yeşil
              //'rgba(16,185,129,0.75)',   // Turkuaz-yeşil
              'rgba(187,247,208,0.9)'    // En açık yeşil
            ]
          },
          kapama_beton: {
            labels: ["Demir", "Beton", "Tel", "Çivi", "Diğer"],
            data: [demirkapamaBetonuTutar, betonkapamaBetonuTutar, telkapamaBetonuTutar, civikapamaBetonuTutar, digerkapamaBetonuTutar],
            background: [
              'rgba(34,197,94,0.85)',    // Koyu yeşil
              //'rgba(132,204,22,0.75)',   // Açık yeşil
              //'rgba(74,222,128,0.85)',   // Orta-açık yeşil
              //'rgba(16,185,129,0.75)',   // Turkuaz-yeşil
              'rgba(187,247,208,0.9)'    // En açık yeşil
            ]
          },
          cati_uygulama: {
            labels: ["Kereste", "OSB", "Çatı İzolasyonu", "Kiremit", "Diğer"],
            data: [keresteTutar, osbTutar, cati_izalasyonuTutar, kiremitTutar, digercatiUygulamaTutar],
            background: [
              'rgba(34,197,94,0.85)',    // Koyu yeşil
              //'rgba(132,204,22,0.75)',   // Açık yeşil
              //'rgba(74,222,128,0.85)',   // Orta-açık yeşil
              //'rgba(16,185,129,0.75)',   // Turkuaz-yeşil
              'rgba(187,247,208,0.9)'    // En açık yeşil
            ]
          },
          duvar_orme_sap: {
            labels: ["Duvar Örme", "Şap"],
            data: [duvarOrmeToplam, sapToplam],
            background: [
              'rgba(34,197,94,0.85)',    // Koyu yeşil
              //'rgba(132,204,22,0.75)',   // Açık yeşil
              //'rgba(74,222,128,0.85)',   // Orta-açık yeşil
              //'rgba(16,185,129,0.75)',   // Turkuaz-yeşil
              'rgba(187,247,208,0.9)'    // En açık yeşil
            ],
            children: {
              "Duvar Örme": "duvar_orme",
              "Şap": "sap"
            }
          },
          sap: {
            labels: ["Kum", "Çimento", "Diğer"],
            data: [kumTutar, cimentoSapTutar, digerSapTutar],
            background: [
              'rgba(34,197,94,0.85)',    // Koyu yeşil
              //'rgba(132,204,22,0.75)',   // Açık yeşil
              //'rgba(74,222,128,0.85)',   // Orta-açık yeşil
              //'rgba(16,185,129,0.75)',   // Turkuaz-yeşil
              'rgba(187,247,208,0.9)'    // En açık yeşil
            ]
          },
          duvar_orme: {
            labels: ["Çimento", "Duvar Bloğu", "Kireç", "Kum & Çakıl", "Diğer"],
            data: [cimentoTutar, duvar_bloguTutar, kirecTutar, kum_cakilTutar, digerduvarOrmeTutar],
            background: [
              'rgba(34,197,94,0.85)',    // Koyu yeşil
              //'rgba(132,204,22,0.75)',   // Açık yeşil
              //'rgba(74,222,128,0.85)',   // Orta-açık yeşil
              //'rgba(16,185,129,0.75)',   // Turkuaz-yeşil
              'rgba(187,247,208,0.9)'    // En açık yeşil
            ]
          },
          ince: {
          labels: [
            "Zemin Uygulamaları", "İç Cephe", "Islak Mekanlar", "Mutfak", "Pimapen",
            "Kapılar", "Korkuluklar", "Dış Cephe", "Mantolama", "Tavan",
            "Elektrik Tesisat", "Sıhhi Tesisat", "Doğalgaz", "Asansör Kurulumu",
            "İklimlendirme", "Peyzaj"
          ],
          data: [
            zeminUygulamalariToplam, icCepheToplam, islakMekanlarToplam, mutfakToplam, pimapenToplam,
            kapilarToplam, korkuluklarToplam, disCepheToplam, mantolamaToplam, tavanToplam,
            elektrikTesisatToplam, sihhiTesisatToplam, dogalgazToplam, asansorKurulumuToplam,
            iklimlendirmeToplam, peyzajToplam
          ],
          background: [
              //"#1e3a8a", // koyu mavi
              //"#60a5fa", // açık mavi
              "#2563eb", // normal mavi
              //"#38bdf8", // çok açık/cyan-mavi
              //"#3b82f6", // orta mavi
              "#93c5fd", // pastel açık mavi
              //"#0ea5e9", // açık turkuaz mavi
              //"#bae6fd", // çok çok açık mavi
              //"#1d4ed8", // koyu mavi
              //"#7dd3fc", // açık mavi
              //"#0284c7", // mavi
              //"#0ea5e9", // açık mavi
            ],
          children: {
            "Zemin Uygulamaları": "zemin_uygulamalari",
            "İç Cephe": "ic_cephe",
            "Islak Mekanlar": "islak_mekanlar",
            "Mutfak": "mutfak",
            "Pimapen": "pimapen",
            "Kapılar": "kapilar",
            "Korkuluklar": "korkuluklar",
            "Dış Cephe": "dis_cephe",
            "Mantolama": "mantolama",
            "Tavan": "tavan",
            "Elektrik Tesisat": "elektrik_tesisat",
            "Sıhhi Tesisat": "sihhi_tesisat",
            "Doğalgaz": "dogalgaz",
            "Asansör Kurulumu": "asansor_kurulumu",
            "İklimlendirme": "iklimlendirme",
            "Peyzaj": "peyzaj"
          }
        },

        // --- Alt children mappingleri ---

        zemin_uygulamalari: {
          labels: ["Seramik", "Parke", "Mermer", "Zemin Boyası", "Epoksi", "Diğer"],
          data: [seramikTutar, parkeTutar, mermerTutar, zeminBoyasiTutar, epoksiTutar, digerZeminUygulamalariTutar],
          background: [
              'rgba(34,197,94,0.85)',    // Koyu yeşil
              //'rgba(132,204,22,0.75)',   // Açık yeşil
              //'rgba(74,222,128,0.85)',   // Orta-açık yeşil
              //'rgba(16,185,129,0.75)',   // Turkuaz-yeşil
              'rgba(187,247,208,0.9)'    // En açık yeşil
            ]
        },
        ic_cephe: {
          labels: ["Kör Kasa", "Köşebent", "Beton Astarı", "Alçı", "Çimento", "Kum", "Hazır Sıva", "İç Cephe Boyası", "Boya Astarı", "Diğer"],
          data: [korKasaTutar, kosebentTutar, betonAstariTutar, alciTutar, cimentoIcCepheTutar, kumIcCepheTutar,
                hazirSivaIcTutar, icCepheBoyasiTutar, boyaAstariTutar, digerIcCepheTutar],
          background: [
              'rgba(34,197,94,0.85)',    // Koyu yeşil
              //'rgba(132,204,22,0.75)',   // Açık yeşil
              //'rgba(74,222,128,0.85)',   // Orta-açık yeşil
              //'rgba(16,185,129,0.75)',   // Turkuaz-yeşil
              'rgba(187,247,208,0.9)'    // En açık yeşil
            ]
        },
        islak_mekanlar: {
          labels: ["Zemin Yalıtımı", "Seramik/Fayans", "Klozetler", "Lavabolar", "Banyo Dolabı", "Duş Teknesi", "Banyo Bataryası", "Lavabo Bataryası", "Diğer"],
          data: [zeminYalitimiTutar, seramikFayansTutar, klozetlerTutar, lavabolarTutar, banyoDolabiTutar, dusTeknesiTutar,
                banyoBataryasiTutar, lavaboBataryasiTutar, digerIslakMekanlarTutar],
          background: [
              'rgba(34,197,94,0.85)',    // Koyu yeşil
              //'rgba(132,204,22,0.75)',   // Açık yeşil
              //'rgba(74,222,128,0.85)',   // Orta-açık yeşil
              //'rgba(16,185,129,0.75)',   // Turkuaz-yeşil
              'rgba(187,247,208,0.9)'    // En açık yeşil
            ]
        },
        mutfak: {
          labels: ["Tezgah", "Evye", "Dolap", "Batarya", "Ankastre", "Diğer"],
          data: [tezgahTutar, mutfakEvyeTutar, mutfakDolabiTutar, mutfakBataryasiTutar, ankastreTutar, digerMutfakTutar],
          background: [
              'rgba(34,197,94,0.85)',    // Koyu yeşil
              //'rgba(132,204,22,0.75)',   // Açık yeşil
              //'rgba(74,222,128,0.85)',   // Orta-açık yeşil
              //'rgba(16,185,129,0.75)',   // Turkuaz-yeşil
              'rgba(187,247,208,0.9)'    // En açık yeşil
            ]
        },
        pimapen: {
          labels: ["Pencere", "Zemin Doğrama", "Diğer"],
          data: [pencerelerTutar, zeminDogramaTutar, digerPimapenTutar],
          background: [
              'rgba(34,197,94,0.85)',    // Koyu yeşil
              //'rgba(132,204,22,0.75)',   // Açık yeşil
              //'rgba(74,222,128,0.85)',   // Orta-açık yeşil
              //'rgba(16,185,129,0.75)',   // Turkuaz-yeşil
              'rgba(187,247,208,0.9)'    // En açık yeşil
            ]
        },
        kapilar: {
          labels: ["Oda Kapıları", "Çelik Kapılar", "Diğer"],
          data: [odaKapilariTutar, celikKapilarTutar, digerKapilarTutar],
          background: [
              'rgba(34,197,94,0.85)',    // Koyu yeşil
              //'rgba(132,204,22,0.75)',   // Açık yeşil
              //'rgba(74,222,128,0.85)',   // Orta-açık yeşil
              //'rgba(16,185,129,0.75)',   // Turkuaz-yeşil
              'rgba(187,247,208,0.9)'    // En açık yeşil
            ]
        },
        korkuluklar: {
          labels: ["Balkon", "Merdiven", "Diğer"],
          data: [balkonTutar, merdivenTutar, digerKorkuluklarTutar],
          background: [
              'rgba(34,197,94,0.85)',    // Koyu yeşil
              //'rgba(132,204,22,0.75)',   // Açık yeşil
              //'rgba(74,222,128,0.85)',   // Orta-açık yeşil
              //'rgba(16,185,129,0.75)',   // Turkuaz-yeşil
              'rgba(187,247,208,0.9)'    // En açık yeşil
            ]
        },
        dis_cephe: {
          labels: ["Hazır Sıva", "Çimento", "Kum", "Dış Cephe Boyası", "Söve", "Boya Astarı", "Diğer"],
          data: [hazirSivaDisTutar, cimentoDisCepheTutar, kumDisCepheTutar, disCepheBoyasiTutar, soveTutar, boyaAstariDisCepheTutar, digerDisCepheTutar],
          background: [
              'rgba(34,197,94,0.85)',    // Koyu yeşil
              //'rgba(132,204,22,0.75)',   // Açık yeşil
              //'rgba(74,222,128,0.85)',   // Orta-açık yeşil
              //'rgba(16,185,129,0.75)',   // Turkuaz-yeşil
              'rgba(187,247,208,0.9)'    // En açık yeşil
            ]        },
        mantolama: {
          labels: ["Düvel/Montaj", "Yalıtım Levha", "Karbonlu EPS", "XPS", "Taş Yünü", "File/Sıva", "Kaplama/Sıva", "Dekoratif Kaplama", "Diğer"],
          data: [duvel_montajTutar, yalitim_levhaTutar, karbonluEpsTutar, xpsTutar, tasYunuTutar,
                file_sivaTutar, kaplama_sivaTutar, dekoratif_kaplamaTutar, digerMantolamaTutar],
          background: [
              'rgba(34,197,94,0.85)',    // Koyu yeşil
              //'rgba(132,204,22,0.75)',   // Açık yeşil
              //'rgba(74,222,128,0.85)',   // Orta-açık yeşil
              //'rgba(16,185,129,0.75)',   // Turkuaz-yeşil
              'rgba(187,247,208,0.9)'    // En açık yeşil
            ]
        },
        tavan: {
          labels: ["Stropiyer", "Alçıpan", "Karolem", "Diğer"],
          data: [stropiyerTutar, alcipanTutar, karolemTutar, digerTavanTutar],
          background: [
              'rgba(34,197,94,0.85)',    // Koyu yeşil
              //'rgba(132,204,22,0.75)',   // Açık yeşil
              //'rgba(74,222,128,0.85)',   // Orta-açık yeşil
              //'rgba(16,185,129,0.75)',   // Turkuaz-yeşil
              'rgba(187,247,208,0.9)'    // En açık yeşil
            ]
        },
        elektrik_tesisat: {
          labels: ["İşçilik", "Diğer"],
          data: [elektrikIsciligiTutar, digerElektrikTutar],
          background: [
              'rgba(34,197,94,0.85)',    // Koyu yeşil
              //'rgba(132,204,22,0.75)',   // Açık yeşil
              //'rgba(74,222,128,0.85)',   // Orta-açık yeşil
              //'rgba(16,185,129,0.75)',   // Turkuaz-yeşil
              'rgba(187,247,208,0.9)'    // En açık yeşil
            ]
        },
        sihhi_tesisat: {
          labels: ["Pis Su", "Temiz Su", "Isıtma", "Diğer"],
          data: [pisSuTutar, temizSuTutar, isitmaTutar, digerSihhiTesisatTutar],
          background: [
              'rgba(34,197,94,0.85)',    // Koyu yeşil
              //'rgba(132,204,22,0.75)',   // Açık yeşil
              //'rgba(74,222,128,0.85)',   // Orta-açık yeşil
              //'rgba(16,185,129,0.75)',   // Turkuaz-yeşil
              'rgba(187,247,208,0.9)'    // En açık yeşil
            ]
        },
        dogalgaz: {
          labels: ["Kurulum", "Diğer"],
          data: [dogalgazKurulumuTutar, digerDogalgazTutar],
          background: [
              'rgba(34,197,94,0.85)',    // Koyu yeşil
              //'rgba(132,204,22,0.75)',   // Açık yeşil
              //'rgba(74,222,128,0.85)',   // Orta-açık yeşil
              //'rgba(16,185,129,0.75)',   // Turkuaz-yeşil
              'rgba(187,247,208,0.9)'    // En açık yeşil
            ]
        },
        asansor_kurulumu: {
          labels: ["Kurulum", "Diğer"],
          data: [asansorKurulumuTutar, digerAsansorTutar],
          background: [
              'rgba(34,197,94,0.85)',    // Koyu yeşil
              //'rgba(132,204,22,0.75)',   // Açık yeşil
              //'rgba(74,222,128,0.85)',   // Orta-açık yeşil
              //'rgba(16,185,129,0.75)',   // Turkuaz-yeşil
              'rgba(187,247,208,0.9)'    // En açık yeşil
            ]
        },
        iklimlendirme: {
          labels: ["Kombi", "Kombi Dolabı", "Klima", "Diğer"],
          data: [kombiTutar, kombiDolabiTutar, klimaTutar, digerIklimlendirmeTutar],
          background: [
              'rgba(34,197,94,0.85)',    // Koyu yeşil
              //'rgba(132,204,22,0.75)',   // Açık yeşil
              //'rgba(74,222,128,0.85)',   // Orta-açık yeşil
              //'rgba(16,185,129,0.75)',   // Turkuaz-yeşil
              'rgba(187,247,208,0.9)'    // En açık yeşil
            ]
        },
        peyzaj: {
          labels: ["Bahçe Duvarı", "Bitkilendirme", "Perforje", "Diğer"],
          data: [bahceDuvariTutar, bitkilendirmeTutar, perforjeTutar, digerPeyzajTutar],
          background: [
              'rgba(34,197,94,0.85)',    // Koyu yeşil
              //'rgba(132,204,22,0.75)',   // Açık yeşil
              //'rgba(74,222,128,0.85)',   // Orta-açık yeşil
              //'rgba(16,185,129,0.75)',   // Turkuaz-yeşil
              'rgba(187,247,208,0.9)'    // En açık yeşil
            ]
        },
        iscilikler: {
          labels: ["Kalıp İşçiliği", "Demir İşçiliği", "Duvar Örme İşçiliği", "Sıva İşçiliği", "Şap İşçiliği", "Çatı İşçiliği",
                    "Mantolama İşçiliği", "Yalıtım İşçiliği", "Su Tesisatı İşçiliği", "Elektrik İşçiliği", "Doğalgaz İşçiliği",
                    "asansör İşçiliği", "Dekor Alçıpan İşçiliği", "Perforje İşçiliği", "İşçilik Diğer"],
            data: [
              kalipIsciligiToplam,
              demirIsciligiToplam,
              duvarOrmeIsciligiToplam,
              sivaIsciligiToplam,
              sapIsciligiToplam,
              catiIsciligiToplam,
              mantolamaIsciligiToplam,
              yalitimIsciligiToplam,
              suTesisatiIsciligiToplam,
              elektrikIsciligiToplam,
              dogalgazIsciligiToplam,
              asansorIsciligiToplam,
              dekorAlcipanIsciligiToplam,
              perforjeIsciligiToplam,
              digerIsciligiToplam
            ],
            background: [
              'rgba(30, 64, 175, 0.8)', 
              'rgba(147, 197, 253, 0.8)',
              'rgba(59,130,246,0.3)',
              'rgba(30, 64, 175, 0.5)'
            ]
        },
        malzemeler:{
          labels:materialNamesList,
          data:materialTutarList,
          background: [
              'rgba(30, 64, 175, 0.8)', 
              'rgba(147, 197, 253, 0.8)',
              'rgba(59,130,246,0.3)',
              'rgba(30, 64, 175, 0.5)'
            ]
        }
      };

        let detailChart;

        // Modal referansını globalde oluştur
        const modalEl = document.getElementById('myInfoModal');
        // Modal kapanınca chartı ve içeriği her zaman temizle (SADECE BİR KEZ tanımlanmalı!)
        modalEl.addEventListener('hidden.bs.modal', function () {
          if (detailChart) {
            detailChart.destroy();
            detailChart = null;
          }
          document.getElementById("modal-body-content").innerHTML = '';
        });

        // Detay modal açıcı fonksiyon
        function openDetailModal(mappingKey, parentLabel, parentValue) {
          const mapping = detailMappings[mappingKey];
          if (!mapping) return;

          document.getElementById("myInfoModalLabel").textContent =
            parentLabel ? parentLabel + " Alt Kalemleri" : "Harcamalar";
            const dynamicHeight = Math.max(mapping.labels.length * 5, 320);

            // 1. Etkileşimli label listesi:
            let clickableListHTML = '<ul class="list-group mt-3">';
            mapping.labels.forEach((lbl, i) => {
              // Eğer bu label'ın children'ı varsa ve mapping.children'da key olarak var ise...
              const isChild = mapping.children && mapping.children[lbl] && detailMappings[mapping.children[lbl]];
              clickableListHTML += `<li class="list-group-item list-group-item-action" style="cursor:pointer" data-label="${lbl}" data-index="${i}">
                <span class="${isChild ? 'fw-bold text-primary' : 'text-primary'}">${lbl}</span>
                <span class="float-end">${mapping.data[i].toLocaleString()} TL</span>
              </li>`;
            });
            clickableListHTML += '</ul>';

            document.getElementById("modal-body-content").innerHTML = `
              ${parentLabel && parentValue !== undefined ? `<b>${parentLabel} tutarı:</b> ${parentValue.toLocaleString()} TL<br>` : ""}
              <canvas id="detailChart" width="380" height="${dynamicHeight}"></canvas>
              <div id="subCalemInfo" style="padding-top:12px;"></div>
              <div id="clickableLabelList">${clickableListHTML}</div>
            `;

          // Listeye tıklama:
          setTimeout(() => {
            document.querySelectorAll('#clickableLabelList li').forEach(li => {
              li.addEventListener('click', function() {
                const label = this.getAttribute('data-label');
                const index = this.getAttribute('data-index');
                const subValue = mapping.data[index];
                if (mapping.children && mapping.children[label] && detailMappings[mapping.children[label]]) {
                  openDetailModal(mapping.children[label], label, subValue);
                } else {
                  document.getElementById('subCalemInfo').innerHTML = `<b>${label} kaleminde daha alt detay bulunamadı.</b>`;
                }
              });
            });
          }, 100);

          function drawDetailChart() {
            if (detailChart) detailChart.destroy();
            const ctx = document.getElementById('detailChart').getContext('2d');
            detailChart = new Chart(ctx, {
              type: 'bar',
              data: {
                labels: mapping.labels,
                datasets: [{
                  label: parentLabel || 'Harcamalar',
                  data: mapping.data,
                  backgroundColor: mapping.background
                }]
              },
              options: {
                indexAxis: 'y',
                elements: {
                  bar: {
                    barThickness: 2
                  }
                },
                plugins: { legend: { display: false }, title: { display: false }},
                onClick: function (evt, elements) {
                  if (elements.length > 0 && mapping.children) {
                    const index = elements[0].index;
                    const subLabel = mapping.labels[index];
                    const subValue = mapping.data[index];
                    const subMappingKey = mapping.children[subLabel];
                    if (subMappingKey && detailMappings[subMappingKey]) {
                      openDetailModal(subMappingKey, subLabel, subValue);
                    } else {
                      document.getElementById('subCalemInfo').innerHTML = `<b>${subLabel} kaleminde daha alt detay bulunamadı.</b>`;
                    }
                  }
                },
                scales: {
                  x: {
                    beginAtZero: true,
                    ticks: {
                      stepSize: 50000,
                      callback: value => value / 1000 + ' bin TL'
                    }
                  }
                }
              }
            });
          }
          modalEl.addEventListener('shown.bs.modal', drawDetailChart, { once: true }); 
          const myModal = new bootstrap.Modal(modalEl);
          myModal.show();
        }

        // Ana chart (dikey bar)
        const ctx = document.getElementById('myChart').getContext('2d');
        const myChart = new Chart(ctx, {
          type: 'bar',
          data: {
            labels: detailMappings.root.labels,
            datasets: [{
              label: 'Harcamalar',
              data: detailMappings.root.data,
              backgroundColor: detailMappings.root.background
            }]
          },
          options: {
            indexAxis: 'x', // Dikey bar
            plugins: { legend: { display: false } },
            scales: {
              y: {
                beginAtZero: true,
                ticks: {
                  stepSize: 50000,
                  callback: function (value) {
                    return value / 1000 + ' bin TL';
                  }
                }
              }
            },
            onClick: (event, elements) => {
              modalEl.addEventListener('hidden.bs.modal', function () {
          if (detailChart) {
            detailChart.destroy();
            detailChart = null;
          }
          document.getElementById("modal-body-content").innerHTML = '';
        });
              if (elements.length > 0) {
                const index = elements[0].index;
                const label = myChart.data.labels[index];
                const value = myChart.data.datasets[0].data[index];
                const mappingKey = detailMappings.root.children[label];
                if (mappingKey) {
                  openDetailModal(mappingKey, label, value);
                }
              }
            }
          }
        });


        document.getElementById('myChart').onclick = function (evt) {
          const chartArea = myChart.chartArea;
          const xAxis = myChart.scales.x;
          const mouseX = evt.offsetX;
          const mouseY = evt.offsetY;
          
          // X eksenindeki label'lar için tıklama alanını belirle (grafik altı)
          if (mouseY > chartArea.bottom && mouseY < chartArea.bottom + 32) {
            const labels = myChart.data.labels;
            const step = (chartArea.right - chartArea.left) / labels.length;
            const relX = mouseX - chartArea.left;
            const index = Math.floor(relX / step);

            if (index >= 0 && index < labels.length) {
              const label = labels[index];
              const value = myChart.data.datasets[0].data[index];
              const mappingKey = detailMappings.root.children[label];
              if (mappingKey) {
                openDetailModal(mappingKey, label, value);
              }
            }
          }
        };



    });
    

    loginButton.addEventListener("click", () => {
        window.location.href = "/";
    });

    /*
    quatationButton.addEventListener("click", () => {
        window.location.href = `/quatation?projectName=${encodeURIComponent(projectName)}`;
    });
    */
    soldButton.addEventListener("click", () => {
        window.location.href = `/sold?projectName=${encodeURIComponent(projectName)}`;
        //window.location.href = `/quatation?projectName=${encodeURIComponent(projectName)}`;
    });
    material.addEventListener("click", () => {
        window.location.href = `/malzeme?projectName=${encodeURIComponent(projectName)}`;
    });
    buttonHome.addEventListener("click", () => {  
        window.location.href = `/draw?projectName=${encodeURIComponent(projectName)}`;
    });
    documentButton.addEventListener("click", () => {
        window.location.href = `/evrak?projectName=${encodeURIComponent(projectName)}`;
    });

    function toMongoFieldName(text) {
        // Tüm Türkçe karakterleri İngilizce karşılıklarına çevir
        const trMap = {
            'ç': 'c', 'ğ': 'g', 'ı': 'i', 'ö': 'o', 'ş': 's', 'ü': 'u',
            'Ç': 'C', 'Ğ': 'G', 'İ': 'I', 'Ö': 'O', 'Ş': 'S', 'Ü': 'U'
        };
        let result = text.replace(/[\u00C0-\u017F]/g, function(c){
            return trMap[c] || c;
        });

        // Harf, sayı ve boşluk dışındaki karakterleri kaldır
        result = result.replace(/[^a-zA-Z0-9\s]/g, "");

        // Trim, toLowerCase ve boşlukları ayırarak camelCase’e dönüştür
        let parts = result.trim().split(/\s+/);
        let camelCase = parts
            .map((p, i) =>
                i === 0
                    ? p.charAt(0).toLowerCase() + p.slice(1).toLowerCase()
                    : p.charAt(0).toUpperCase() + p.slice(1).toLowerCase()
            )
            .join('');

        return camelCase;
    }

    async function readData (activeType){
        let array = [];
        const dataToDb = {
            userId: userId,
            projectName: projectName,
            activeType: toMongoFieldName(activeType),
            process: "read"
        };

        try {  
            // Kullanıcı giriş bilgilerini backend'e gönder  
            const response = await fetch('/analiz', {  
                method: 'POST',  
                headers: {  
                    'Content-Type': 'application/json'  
                },
                credentials: 'include',
                body: JSON.stringify(dataToDb)
            });
        
            const result = await response.json();
            if (!response.ok && !result.success) {
                // Sunucu response.json ile hata mesajı döndüyse
                showWarningMessage(result.message, "tamam", true);
            } else{
                array = result.activeType;
            }
        } catch (error) {
            // Ağ hatası, sunucuya istek ulaşmazsa
            showWarningMessage("Bağlantı hatası, lütfen daha sonra tekrar deneyin!", "tamam", true);
            console.log('Hata:', error);
        }
        return array;
    }  

    async function saveData(activeType, saves){
      const dataToDb = {
          userId,
          projectName,
          activeType: activeType,
          saves,
          process :"save"
      };
      //console.log("dataToDb ",dataToDb);
      
      try {  
          // Kullanıcı giriş bilgilerini backend'e gönder  
          const response = await fetch('/analiz', {  
              method: 'POST',  
              headers: {  
                  'Content-Type': 'application/json'  
              },
              credentials: 'include',
              body: JSON.stringify(dataToDb)
          });
          const result = await response.json();
          if (!response.ok && !result.success) {
              // Sunucu response.json ile hata mesajı döndüyse
              showWarningMessage(result.message, "tamam", true);
          }
      } catch (error) {
          // Ağ hatası, sunucuya istek ulaşmazsa
          showWarningMessage("Bağlantı hatası, lütfen daha sonra tekrar deneyin!", "tamam", true);
          console.log('Hata:', error);
      }
      
    }

    // Türk Lirası örneği için (virgül: ondalık, nokta: binlik ayırıcı)  
    function formatTL(number) {  
      number = number.toString();  
      let [intPart, decPart] = number.replace(",", ".").split(".");  
      intPart = intPart.replace(/\D/g, "");
      intPart = intPart.replace(/\B(?=(\d{3})+(?!\d))/g, ".");  

      return decPart ? `${intPart},${decPart.substring(0,2)}` : intPart;  
    }


  </script>  
</body>  
</html>