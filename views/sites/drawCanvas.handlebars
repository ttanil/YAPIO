<!DOCTYPE html>  
<html lang="en">  
<head>  
    <meta charset="UTF-8">  
    <meta name="viewport" content="width=device-width, initial-scale=1.0">  
    <title>Bina Görünüm</title>

    <link rel="icon" type="image/png" href="img/icon.png" sizes="32x32">
    <link rel="icon" type="image/x-icon" href="/favicon.ico">
    <!-- Apple cihazlar için (PNG ve önerilen boyut 180x180) -->
    <link rel="apple-touch-icon" href="/apple-touch-icon.png" sizes="180x180">

    <!-- Bootstrap CSS -->  
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css" rel="stylesheet">  
    <link rel="stylesheet" href="css/index.css">

    <style>  
        /* Genel Stiller */  
        body {
            min-height: 100dvh;
            margin: 0;
            background: linear-gradient(to bottom, #fff, #dbeafe 75%);
        }
        .city-silhouette {
            position: fixed;   /* absolute değil, fixed! */
            left: 0; right: 0; bottom: 0;
            width: 100vw;
            height: 24vh;
            min-height: 100px;
            max-height: 220px;
            pointer-events: none;
            opacity: 0.5;
        }
        .main-content {
            position: relative;
            z-index: 2;
        }
        .frost {
            backdrop-filter: blur(8px) brightness(0.96);
        }

        .custom-short-menu {
            display: flex;
            gap: 22px;
            justify-content: center;   /* Ortala */
            align-items: flex-start;
            width: 100%;
            margin-top: 18px;
            margin-bottom: 10px;
        }

        .menu-btn {
            display: flex;
            flex-direction: column;
            align-items: center;
            width: 70px;
            text-decoration: none;
            background: none;
            border: none;
            outline: none;
            transition: color 0.18s, background 0.18s;
        }

        .menu-btn img {
            width: 32px;
            height: 32px;
            margin-bottom: 4px;
        }

        .menu-btn span {
            font-size: 14px;
            color: #333;
        }

        .menu-btn:hover span,
        .menu-btn:focus span {
            color: #1d67c4;
            font-weight: 500;
        }

        #buttonHome {
            margin-right: 18px; /* Sağdan istediğin kadar boşluk (arttırabilirsin) */
        }

    
      
        .container-fluid {  
            display: flex;  
            flex: 0 0 100%;  
            flex-wrap: nowrap;  
            align-items: center;  
        }  
        #projectName {  
            flex: 0 0 90%;  
            white-space: nowrap;  
            overflow: hidden;  
            text-overflow: ellipsis;  
            font-family: Arial, sans-serif;  
            font-size: 36px;
        }  
        .img-fluid {  
            flex: 0 0 auto;  
            height: 30px;  
            width: 30px;  
            margin-right: 10px;  
        }
        .custom-btn {  
            background-color: #847539;
            color: white; /* Yazı rengi */  
            border: none; /* Kenarlığın kaldırılması */  
            border-radius: 10px; /* Kenarlıkları yuvarlaklaştırma */  
            padding: 10px 20px; /* İç boşluklar */  
            font-family: "Varela Round";  
            font-size: 16px; /* Yazı boyutu */  
            font-weight: bold; /* Kalın yazı */  
            letter-spacing: 2px;
            cursor: pointer; /* Fare imlecini işaretçi yapma */  
            transition: background-color 0.3s ease; /* Hover geçiş efekti */
            margin-right: 40px;
        }

        /* Bina Konteyneri */  
        .bina-container-ortala {
            display: flex;
            justify-content: center;
            align-items: flex-start; /* yukarıdan hizalı, orta olmasını istersen center da olur */
            width: 100vw;
            min-height: auto;
        }

        #building-container {
            width: 350px;
            margin-top: 30px; 
            padding-bottom: 50px;
            padding-top: 30px;
            background-color: #b2c0f7;
            border-radius: 10px;
            box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
            z-index: 100;
            display: flex;
            flex-direction: column;
            justify-content: center;
        }
        .mimar-label{
            position: fixed;     /* Hep ekranın sağında kalır */
            top: 500px;          /* Yukarıdan ne kadar boşluk? (ayarlarsın) */
            right: 105px;         /* Sağdan boşluk, dilediğin kadar */
            width: 280px;         /* Kutu genişliği */
            display: flex;
            align-items: center;
            justify-content: start;
            padding-left: 8px;
            background: rgba(255,255,255,0.93);
            box-shadow: -2px 0 8px 0 rgba(44,62,80,.07);
            font-size: 1rem;
            font-weight: bold;
            color: #2d3748;
            border-radius: 6px;
            height: 40px;        /* Sabit yükseklik, ister otomatik ister artır */
            z-index: 10;
            user-select: none;
        }
        #mimarName, #sefName{
            font-size: 0.9rem;
            font-weight: bold;
            color: #2d3748;
            padding-left: 8px;
            display: flex;
            align-items: center;
            justify-content: start;
        }
        .mimar-icon {
            position: absolute;
            top: 8px;
            right: 10px;
            width: 20px;
            height: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
        }
        .sef-label {
            position: fixed;     /* Hep ekranın sağında kalır */
            top: 555px;          /* Yukarıdan ne kadar boşluk? (ayarlarsın) */
            right: 105px;         /* Sağdan boşluk, dilediğin kadar */
            width: 280px;         /* Kutu genişliği */
            display: flex;
            align-items: center;
            justify-content: start;
            padding-left: 8px;
            background: rgba(255,255,255,0.93);
            box-shadow: -2px 0 8px 0 rgba(44,62,80,.07);
            font-size: 1rem;
            font-weight: bold;
            color: #2d3748;
            border-radius: 6px;
            height: 40px;        /* Sabit yükseklik, ister otomatik ister artır */
            z-index: 10;
            user-select: none;
        }
        .mimar-label2,
            .sef-label2{
                display: none !important;
        }
        /* Çatı görünümü için üçgen */  
        .roof-svg{
            margin: auto;
            margin-bottom: -20px;
        }
        /* Her bir katın stili */  
        .floor {  
            border: 1px solid #6c757d;  
            background-color: #c2c5c9;  
            display: flex;  
            flex-direction: column; /* Kat ismini ve pencere grubunu alt alta koy */  
            align-items: center; /* Kat numarasını ve pencereleri ortalar */  
            font-weight: bold;  
            font-size: 14px;  
            color: #F8F9FA;  
            height: 100px; /* Sabit kat yüksekliği */  
            box-sizing: border-box;  
            position: relative;  
            margin: auto;
            
        }  
        /* Kat üzerindeki kat ismi */  
        .floor-name {  
            font-size: 14px;  
            font-weight: bold;  
            color: white;  
            position: absolute;
            top: 78%;
            justify-content: center;
        }  
        /* Pencere Alanı (Hizalamayı kontrol eder) */  
        .window-container {  
            display: flex; /* Pencereleri yatay hizalar */  
            justify-content: center; /* Pencereleri ortalar */  
            gap: 10px; /* Pencereler arasındaki boşluk */  
            margin-top: 7px;
        }  
        /* Pencere Stili */  
        .window {
            border: 2px solid #ffffff;  
            background-color: #eaebec;  
            display: inline-block;  
            border-radius: 4px;  
            cursor: pointer;
        }  


        .door-selection-wrapper {
            gap: 0px;
        }
        .door-side {
            cursor: pointer;
            border: 3px solid transparent;
            border-radius: 12px;
            padding: 8px 4px 3px 4px;
            transition: border 0.22s, box-shadow 0.22s;
            width: 60px;
        }
        .img-door {
            width: 48px;
            height: 72px;
            display: block;
        }



        /* Buton Stilleri */  
        .btn-orange {  
            background-color: #265df5; /* Turuncu renk */  
            color: white; /* Yazı rengini beyaz yap */  
            border: none; /* Çerçeve kaldır */  
        }  

        .btn-orange:hover {  
            background-color: #1744c2; /* Daha koyu turuncu (hover efekti) */  
            color: white;
        }  
        .disabled {  
            pointer-events: none; /* Tıklamayı tamamen devre dışı bırakır */  
            opacity: 0.5; /* Görünümü gri ve bastırılmış yapar */  
        } 

        .modal {  
            z-index: 1055 !important; /* Bootstrap modal z-index */  
        }  

        .modal-backdrop {  
            z-index: 1050 !important; /* Modalın karartma arka planı */  
        }

        .modal-body{
            display: flex;
            flex-direction: column;
        }

        .total-area-container {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
            background-color: #f9fafb;
            border: 2px solid #847539;
            border-radius: 12px;
            padding: 8px 14px;
            margin: 24px 0 10px 0;
            box-shadow: 0 4px 22px 0 rgba(132, 117, 57, 0.04);
            font-family: "Varela Round", Arial, sans-serif;
            transition: background 0.3s;
        }

        .total-area-label {
            font-size: 16px;
            font-weight: 500;
            color: #847539;
            margin-right: 12px;
            white-space: nowrap;
        }

        .total-area-value {
            background: #847539;
            color: #fff;
            font-weight: bold;
            font-size: 17px;
            border-radius: 8px;
            padding: 4px 11px;
            min-width: 60px;
            text-align: center;
            letter-spacing: 1px;
            box-shadow: 0 2px 5px 0 rgba(132, 117, 57, 0.1);
        }


        /* İsim giriş modalı */
        .name-edit-modal-overlay {
            display: none;
            position: fixed;
            inset: 0;
            background: rgba(0,0,0,0.15);
            z-index: 3001; /* Bootstrap modal 1055 üstüne gelsin istersen artır */
            align-items: center;
            justify-content: center;
        }
        .name-edit-modal-overlay.active {
            display: flex;
        }
        .name-edit-modal-content {
            background: #fff;
            border-radius: 7px;
            padding: 24px 28px 16px 28px;
            min-width: 260px;
            box-shadow: 0 8px 44px rgba(44,62,80,.18), 0 1.5px 4px rgba(44,62,80,.08);
            position: relative;
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        .name-edit-modal-close {
            position: absolute;
            top: 7px;
            right: 14px;
            cursor: pointer;
            font-size: 22px;
            color: #2d3748;
            opacity: 0.6;
            transition: opacity .2s;
        }
        .name-edit-modal-close:hover {
            opacity: 1;
        }
        #name-edit-modal-input {
            margin-top: 16px;
            margin-bottom: 17px;
            font-size: 1rem;
            border-radius: 5px;
            width: 100%;
        }
        
        @media (max-width: 1200px) {
            .mimar-label,
                .sef-label {
                    display: none !important;
            }

            .mimar-label2{
                position: relative;
                width: 280px;         /* Kutu genişliği */
                display: flex !important;
                align-items: center;
                justify-content: start;
                padding-left: 8px;
                background: rgba(255,255,255,0.93);
                box-shadow: -2px 0 8px 0 rgba(44,62,80,.07);
                font-size: 1rem;
                font-weight: bold;
                color: #2d3748;
                border-radius: 6px;
                height: 32px;        /* Sabit yükseklik, ister otomatik ister artır */
                margin-left: auto;
                margin-right: auto;
                margin-top: 15px;
            }
            .sef-label2{
                position: relative;
                width: 280px;         /* Kutu genişliği */
                display: flex !important;
                align-items: center;
                justify-content: start;
                padding-left: 8px;
                background: rgba(255,255,255,0.93);
                box-shadow: -2px 0 8px 0 rgba(44,62,80,.07);
                font-size: 0.9rem;
                font-weight: bold;
                color: #2d3748;
                border-radius: 6px;
                height: 32px;        /* Sabit yükseklik, ister otomatik ister artır */
                margin-left: auto;
                margin-right: auto;
                margin-top: 5px;
            }
            #mimarName2, #sefName2{
                font-size: 0.9rem !important;
                font-weight: bold;
                color: #2d3748;
                padding-left: 8px;
                display: flex;
                align-items: center;
                justify-content: start;
            }
            .mimar-icon2 {
                position: absolute !important;
                top: 8px;
                right: 10px;
                width: 20px;
                height: 20px;
                display: flex;
                align-items: center;
                justify-content: center;
                cursor: pointer;
            }

        }

        /* Responsive Tasarım */  
        @media (max-width: 768px) {
            .city-silhouette {
                position: fixed;
                left: 0; right: 0; bottom: 0;
                width: 100vw;
                height: 14vh;
                min-height: 70px;
                max-height: 150px;
            }
            .container-navbar {  
                flex-wrap: wrap;  
                justify-content: flex-end;  
            }  
            #projectName {
                flex: 0 0 70%;  
                overflow: hidden;  
                text-overflow: ellipsis;  
                white-space: nowrap;  
                text-align: left;  
                font-size: 17px !important;  
                max-width: 65%;     /* Taşmayı önler */  
                min-width: 0;       /* flex shrink için gerekli */  
                margin-right: 0;    /* İstenirse gap için elle ekleyin */
            }  
            #buttonHome {
                flex: 0 0 30px;     /* Eğer 30px'lik bir kutu ise tam sabitlenir */  
                padding: 0;         /* Ekstra boşlukları engeller */  
                margin-left: 0;     /* İstenirse 5px gibi küçük bir boşluk eklenebilir */  
                display: flex;  
                align-items: center;
            }
            .img-fluid {  
                height: 28px;  
                width: 28px;  
                margin-right: 0;    /* Sağdan boşluğu kaldırır */  
                margin-left: 0;     /* Soldan boşluğu kaldırır */
            }  
            .custom-btn {  
                font-size: 12px; /* Yazı boyutu */
                padding: 5px 10px;      /* Yan boşlukları biraz artırdım */
                border-radius: 6px;      /* Köşeler hafif yuvarlatıldı */
                color: #fff;
                border: none;
                margin-right: 12px;
                display: inline-block; 
                font-weight: 500;     
            }
            .navbar-toggler {  
               /* background-color: rgb(89, 125, 234);  */
                background-color: #c2c5c9;  
                flex: 0 0 auto;  
                margin-left: auto;  
                justify-content: flex-end;
            }
            .container-fluid {  
                flex-wrap: wrap;  
            } 
            .dropdown-item{
                display: flex;
                margin-left: auto;  
                
            }
            .mobile-navbar-menu {  
                justify-content: flex-end !important;  
                text-align: right !important;  
                margin-top: 10px;
                margin-bottom: 5px;
            }  
            .mobile-navbar-menu .nav-item, .mobile-navbar-menu .dropdown-item-mobile {
                display: flex;
                align-items: center;
                justify-content: space-between !important;  
                text-align: right !important;
                font-size: 1.1rem;
                font-style: bold !important;
                height: 22px;
                margin-top: 2px;
                justify-self: end;
            }
            .dropdown-item-mobile {
                width: 34%;
                font-family: Arial, sans-serif !important; 
                color: rgb(94, 93, 93) !important;      /* Varsayılan metin rengini kullan */  
                text-decoration: none !important; /* Altı çizgiyi kaldır */  
                font-weight: 400 !important;
            }


            .custom-short-menu {
                display: flex;
                gap: 12px;
                justify-content: center;
                align-items: flex-start;
                width: 90% !important;
                margin-top: 12px;
                margin-left: auto;
                margin-right: auto; /* Ortalamak için */
            }
            .menu-btn {
                display: flex;
                flex-direction: column;
                align-items: center;
                flex: 1 1 0;    /* EŞİT yayılır, min 0 olur, büyüyebilir */
                text-decoration: none;
                background: none;
                border: none;
                outline: none;
                transition: color 0.18s, background 0.18s;
                min-width: 0;   /* Sıkışmaya izin verir */
            }
            .menu-btn img {
                width: 25px;
                height: 25px;
                margin-bottom: 4px;
            }
            .menu-btn span {
                font-size: 0.8rem;
                white-space: nowrap; /* Çok taşmasını önlemek için */
                text-align: center;
            }

            
            /* Bina Konteyneri */  
            #building-container {  
                width: 88%;
                margin-top: 15px; 
                padding-bottom: 20px;
                padding-top: 10px;
            }
            .mimar-label,
                .sef-label {
                    display: none !important;
            }

            /* Çatı görünümü için üçgen */  
            .roof-svg{
                margin-bottom: -20px;
            }
            /* Her bir katın stili */  
            .floor {  
                font-size: 14px;
                height: 90px; /* Sabit kat yüksekliği */
            }  
            /* Kat üzerindeki kat ismi */  
            .floor-name {  
                display: flex;  
                font-size: 14px; 
                position: absolute;
                top: 78%;
                justify-content: center;
            }  
            /* Pencere Alanı (Hizalamayı kontrol eder) */  
            .window-container {
                gap: 10px; /* Pencereler arasındaki boşluk */  
                margin-top: 7px;
            }
            /* Çatı görünümü için üçgen */  
            .roof {  
                width: 0; /* Dinamik olarak ayarlanacak */  
                height: 0;  
                border-left: 100px solid transparent;  
                border-right: 100px solid transparent;  
                border-bottom: 50px solid #ff5733; /* Çatı rengi */  
                margin: 0 auto;
            }

            .img-door {
                width: 28px;
                height: 45px;
            }


            .sold-button, .owner-button{
                padding-right: 10px;
            }
            .owner-button{
                margin-left: -10px;
            }
            .btn-secondary, .btn-warning, .btn-danger{
                font-size: 13px;
            }
            #sellButton{
                padding: 2px !important;
            }

            .total-area-container {
                width: 88%;
                flex-direction: column;
                justify-content: center;
                align-items: center;    /* <--- stretch yerine center */
                gap: 3px;
                padding: 10px 10px;
                margin: 16px 0 6px 0;
                width: 100%;
            }
            .total-area-label {
                font-size: 15px;
                margin-right: 0;
                margin-bottom: 2px;
                text-align: center;    /* <--- ortala */
                width: 100%;
            }
            .total-area-value {
                font-size: 17px;
                padding: 7px 0;
                min-width: 0;
                text-align: center;    /* <--- ortala */
                width: 100%;
            }
        }  
    </style>  
</head>  
<body class="relative min-h-screen w-full bg-gradient-to-b from-white to-blue-100 flex flex-col items-center justify-start">
  <!-- Alt Şehir Silüeti SVG -->
  <svg class="city-silhouette" viewBox="0 0 400 96" fill="none" preserveAspectRatio="none" width="100%" height="100%">
  <g>
    <!-- Sol bloklar -->
    <rect x="0" y="60" width="14" height="36" rx="2" fill="#6366f1" opacity="0.13"/>
    <rect x="16" y="40" width="22" height="56" rx="4" fill="#60a5fa" opacity="0.18"/>
    <!-- Çatılı bina -->
    <rect x="41" y="72" width="12" height="24" rx="2" fill="#818cf8" opacity="0.16"/>
    <polygon points="41,72 47,62 53,72" fill="#818cf8" opacity="0.28"/>
    <rect x="56" y="60" width="16" height="36" rx="3" fill="#38bdf8" opacity="0.14"/>
    <!-- Pencereli uzun blok -->
    <rect x="75" y="36" width="12" height="60" rx="2" fill="#60a5fa" opacity="0.15"/>
    <rect x="81" y="44" width="2" height="8" rx="1" fill="#fff" opacity="0.22"/>
    <rect x="81" y="60" width="2" height="8" rx="1" fill="#fff" opacity="0.15"/>
    <!-- Mini blok -->
    <rect x="90" y="80" width="7" height="16" rx="1.5" fill="#818cf8" opacity="0.19"/>
    
    <!-- Orta bloklar -->
    <rect x="100" y="66" width="18" height="30" rx="2" fill="#6366f1" opacity="0.09"/>
    <rect x="121" y="46" width="28" height="50" rx="3" fill="#818cf8" opacity="0.09"/>
    <rect x="152" y="78" width="12" height="18" rx="2" fill="#60a5fa" opacity="0.16"/>
    <!-- Yan yana iki blok farklı yükseklikte -->
    <rect x="170" y="69" width="16" height="27" rx="2" fill="#818cf8" opacity="0.12"/>
    <rect x="188" y="79" width="10" height="17" rx="2" fill="#6366f1" opacity="0.12"/>
    <!-- Asimetrik büyük blok -->
    <rect x="201" y="29" width="29" height="67" rx="4" fill="#60a5fa" opacity="0.14"/>
    <!-- Farklı ton kısa blok -->
    <rect x="233" y="74" width="12" height="22" rx="2" fill="#38bdf8" opacity="0.13"/>
    <!-- İnce yüksek blok -->
    <rect x="248" y="25" width="9" height="71" rx="2" fill="#818cf8" opacity="0.17"/>
    <!-- Diğer bloklar (düz, alçak/kalın) -->
    <rect x="260" y="79" width="23" height="17" rx="3" fill="#6366f1" opacity="0.1"/>
    <rect x="287" y="67" width="16" height="29" rx="2" fill="#60a5fa" opacity="0.11"/>
    <!-- Minik bloklar ve farklı renk -->
    <rect x="306" y="82" width="6" height="14" rx="1" fill="#818cf8" opacity="0.17"/>
    <rect x="316" y="68" width="10" height="28" rx="2" fill="#38bdf8" opacity="0.14"/>
    <!-- Geniş kısa bina -->
    <rect x="330" y="80" width="26" height="16" rx="2" fill="#6366f1" opacity="0.09"/>
    <!-- Sağda küçük çatılı blok -->
    <rect x="360" y="70" width="13" height="26" rx="2" fill="#60a5fa" opacity="0.12"/>
    <polygon points="360,70 366.5,61 373,70" fill="#60a5fa" opacity="0.22"/>
    <!-- Sağda yüksek son blok -->
    <rect x="378" y="24" width="18" height="72" rx="2.5" fill="#6366f1" opacity="0.11"/>
    <!-- En sağ mini pencere detayı -->
    <rect x="384" y="32" width="2.5" height="8" rx="1" fill="#fff" opacity="0.20"/>
  </g>
</svg>

    <!-- Responsive Header -->  
    <nav class="header d-flex justify-content-between align-items-center px-3">
        <span class="d-flex align-items-center gap-2">
            <img src="img/icon.png" alt="Logo" width="32" height="32">
            Yapıo
        </span>
        <button class="btn custom-btn" id="loginButton" style="display: none;">PROJELER</button>  
    </nav>

    <!-- Navbar -->  
    <nav class="navbar navbar-expand-lg navbar-light bg-light sticky-top shadow-sm mt-4 container-navbar">  
        <div class="container-fluid">  
            <!-- Proje Adı -->  
            <h4 class="navbar-brand" id="projectName">Proje Adı</h4>  
            <!-- Ana Sayfa Butonu -->  
            <button class="btn d-flex navbar-home-button" id="buttonHome">  
                <img src="img/home1_1.png" alt="Katlar Görseli" class="img-fluid rounded">  
            </button>
        </div>  
    </nav> 

    <div class="custom-short-menu" id="regulation-button-area">
        <a class="menu-btn" id="regulation-button" href="#">
            <img src="img/edit.png" alt="">
            <span>Düzenle</span>
        </a>
        <!--
        <a class="menu-btn" id="quatation-button" href="#">
            <img src="img/pay1_1.png" alt="">
            <span>Giderler</span>
        </a>
        -->
        <a class="menu-btn" id="document-button" href="#">
          <img src="/img/building-plan.png" alt="">
          <span>Yapı Süreci</span>
        </a>
        <a class="menu-btn" id="graphs-button" href="#">
            <img src="img/growth_1.png" alt="">
            <span>Analizler</span>
        </a>
        <a class="menu-btn" id="sold-button" href="#">
            <img src="/img/property.png" alt="">
            <span>Satış</span>
        </a>
        <a class="menu-btn" id="material-button" href="#">
            <img src="/img/list.png" alt="">
            <span>Malzeme <br>Yönetimi</span>
        </a>
    </div>

    <div id="loader" style="display:none;">
        <div class="spinner"></div>
        <span>Yükleniyor...</span>
    </div>

    <!-- Bina Alanı -->  
    <div class="bina-container-ortala">
        <div id="building-container"></div>
    </div>
    <div class="mimar-label">MİMAR
        <span class="mimar-icon" id="mimarEnter">
            <!-- Kalem ikonu SVG -->
            <svg width="15" height="15" viewBox="0 0 20 20" fill="none">
                <path d="M13.79 3.21A2.25 2.25 0 0 1 17 6l-9.04 9.04a1 1 0 0 1-.42.25l-3.79 1.14a.5.5 0 0 1-.62-.62l1.14-3.79a1 1 0 0 1 .25-.42L13.79 3.21zm1.42 1.42l-1.42-1.42M6 16h.01" stroke="#2d3748" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
        </span>
        <div id="mimarName">Ahmet KUMRU</div>
    </div>
    <div class="sef-label">ŞANTİYE ŞEFİ
        <span class="mimar-icon" id="sefEnter">
            <!-- Kalem ikonu SVG -->
            <svg width="15" height="15" viewBox="0 0 20 20" fill="none">
                <path d="M13.79 3.21A2.25 2.25 0 0 1 17 6l-9.04 9.04a1 1 0 0 1-.42.25l-3.79 1.14a.5.5 0 0 1-.62-.62l1.14-3.79a1 1 0 0 1 .25-.42L13.79 3.21zm1.42 1.42l-1.42-1.42M6 16h.01" stroke="#2d3748" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
        </span>
        <div id="sefName">Polat UYANIK</div>
    </div>

    <!-- Modal -->  
    <div class="modal fade" id="roomModal" tabindex="-1" aria-labelledby="roomModalTitle" aria-hidden="true">  
        <div class="modal-dialog">  
            <div class="modal-content">  
                <div class="modal-header">  
                    <h5 class="modal-title" id="roomModalTitle" style="font-size:1.4rem;">Oda Detayları</h5>  
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Kapat"></button>  
                </div>
                <!-- Subtitle burada başlar -->  
                <div id="roomModalSubtitle"> 
                    <!-- Apartman ya da ekstra bilgi JS ile buraya yazılacak -->  
                </div>
                <div id="roomModalImage"> 
                    <!-- Dairenin resmi için -->  
                </div>
                <p class="d-flex justify-content-center mt-3" style="font-size:1.2rem;" id="roomModalDesc">Seçilen oda adı buraya gelecek.</p>

                <div class="modal-body">
                    <!-- Aksiyon butonları -->  
                    <div class="row flex-nowrap" id="buttonGroup">  
                        <div class="col-3 d-flex justify-content-start sold-button">  
                            <button id="sellButton" class="btn btn-danger w-100" style="color: #ffffff; font-weight: 400;">Sat</button>  
                        </div>  
                        <div class="col-4 d-flex justify-content-start owner-button">
                            <button id="ownerButton" class="btn btn-warning w-100" style="background-color: #3e87e6; color: #ffffff;">Yer Sahibi</button>  
                        </div> 
                        <div class="col-5 d-flex justify-content-end notSold-button">  
                            <button id="removeSellButton" class="btn btn-secondary">Kaldır</button>  
                        </div>
                    </div>
                </div>  

                <!-- Form Bölümü: BAŞLANGIÇTA GİZLİ -->  
                <div id="roomInfoForm" class="my-3" style="width:60%; margin:0 auto; display:none;">  
                    <form id="infoForm">  
                        <div class="info-form mb-2">  
                            <label for="price" class="form-label">Satış Fiyatı</label>  
                            <input type="text" class="form-control" id="itemPrice" required>  
                        </div>  
                        <div class="mb-2">  
                            <label for="userInfo" class="form-label">Ad, Soyad</label>  
                            <input type="text" class="form-control" id="buyerInfo" required>  
                        </div>  
                        <button type="submit" class="btn btn-primary w-100" id="okButton">Tamam</button>  
                    </form>  
                </div>
            </div>  
        </div>
    </div>

    <!-- Toplam Brüt Metrekare Alanı -->
    <div class="total-area-container">
        <div class="total-area-label">Toplam İnşaat Alanı</div>
        <div class="total-area-value" id="totalBrutArea">0 m²</div>
    </div>

    <div class="mimar-label2">MİMAR
        <span class="mimar-icon2" id="mimarEnter2">
            <!-- Kalem ikonu SVG -->
            <svg width="15" height="15" viewBox="0 0 20 20" fill="none">
                <path d="M13.79 3.21A2.25 2.25 0 0 1 17 6l-9.04 9.04a1 1 0 0 1-.42.25l-3.79 1.14a.5.5 0 0 1-.62-.62l1.14-3.79a1 1 0 0 1 .25-.42L13.79 3.21zm1.42 1.42l-1.42-1.42M6 16h.01" stroke="#2d3748" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
        </span>
        <div id="mimarName2">Ahmet KUMRU</div>
    </div>
    <div class="sef-label2 mb-4">ŞANTİYE ŞEFİ
        <span class="mimar-icon2" id="sefEnter2">
            <!-- Kalem ikonu SVG -->
            <svg width="15" height="15" viewBox="0 0 20 20" fill="none">
                <path d="M13.79 3.21A2.25 2.25 0 0 1 17 6l-9.04 9.04a1 1 0 0 1-.42.25l-3.79 1.14a.5.5 0 0 1-.62-.62l1.14-3.79a1 1 0 0 1 .25-.42L13.79 3.21zm1.42 1.42l-1.42-1.42M6 16h.01" stroke="#2d3748" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
        </span>
        <div id="sefName2">Polat UYANIK</div>
    </div>

    <!-- İsim Girişi Modalı -->
    <div id="name-edit-modal-overlay" class="name-edit-modal-overlay">
        <div class="name-edit-modal-content">
            <span id="name-edit-modal-close" class="name-edit-modal-close">&times;</span>
            <h3 id="name-edit-modal-title">İsmi Düzenle</h3>
            <input id="name-edit-modal-input" type="text" class="form-control" />
            <button id="name-edit-modal-save" class="btn btn-primary w-100 mt-3">Kaydet</button>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"></script>

    <script type="module">
        import { getModal } from '/js/modal.js';
        import { isBodrumFloorDb, getRoomNumbers } from '/js/building.js';
        import { showWarningMessage } from '/js/showMessage.js';
        
        //const navbarCollapse = document.getElementById('navbarNav');  
        //const bsCollapse = new bootstrap.Collapse(navbarCollapse, { toggle: false });
        const regulationButton = document.getElementById("regulation-button");
        const regulationButtonArea = document.getElementById("regulation-button-area");
        //const quatationButton = document.getElementById("quatation-button"); 
        const graphsButton = document.getElementById("graphs-button"); 
        const buildingContainer = document.getElementById("building-container");
        const projectNameString = document.getElementById("projectName");  
        const modalTitle = document.getElementById("roomModalTitle");  
        const modalSubtitle = document.getElementById("roomModalSubtitle");  
        const roomModalImage = document.getElementById("roomModalImage");  
        const modalDesc = document.getElementById("roomModalDesc");
        const buildingContainerArea = document.querySelector(".building-container-area");
        const buttonHome = document.getElementById("buttonHome");
        const roof = document.createElement("div"); 
        const loginButton = document.getElementById("loginButton");
        const soldButton = document.getElementById("sold-button");
        const material = document.getElementById("material-button");
        const documentButton = document.getElementById("document-button"); 
        const totalBrutArea = document.getElementById("totalBrutArea");

        const buttonGroup = document.getElementById("buttonGroup");  
        const sellButton = document.getElementById("sellButton");  
        const removeSellButton = document.getElementById("removeSellButton");  
        const ownerButton = document.getElementById("ownerButton");  
        const roomInfoForm = document.getElementById("roomInfoForm");  
        const itemPrice = document.getElementById("itemPrice");  
        const buyerInfo = document.getElementById("buyerInfo");  
        const okButton = document.getElementById("okButton");

        const mimarEnter2 = document.getElementById("mimarEnter2");

        let SCALE = 0;
        let screenWidth = null;
        let screenHeight = null;
        let floorsData = null;
        let selectedFloor = 0;

        // Dinamik çatı genişliği için max pencere sayılarını kontrol etmek için değişken  
        let maxWidth = 0;

        let fromControl = false;

        let userId = null;
        let projectName = null;
        let building = null;
        let floorsDataFromDb = null;
        let selectedDoor = "right";
        let selectedWall = "none";
        let numberOfFloors = null;

        // DOM yüklendiğinde işlem başlat  
        document.addEventListener("DOMContentLoaded", () => {  
            event.preventDefault(); // Sayfanın yeniden yüklenmesini engelle  

            window.user = {{#if user}}
                { "email": "{{user.email}}", "role": "{{user.role}}", "userId": "{{user.id}}", "project": {{{json project}}} }
            {{else}}
                { "role": "{{role}}" }
            {{/if}};

            //console.log(window.user);

            userId = window.user.userId;
            const projectNameDb = window.user.project.projectName;
            projectName = projectNameDb;
            if(projectName){
                const projectNameText = projectNameDb.toUpperCase();
                projectNameString.textContent = projectNameText;
            }
            if(userId){
                loginButton.style.display = "block";
            } else{
                loginButton.style.display = "none";
            }

            const urlParams = new URLSearchParams(window.location.search);  
            const cameFrom = urlParams.get('from');  
            if (cameFrom) {  
                fromControl = true;
                regulationButtonMobileArea.style.display = "none";
                regulationButtonArea.style.display = "none";
            }

            setBuildingFromDb();  

            // Çatı genişliğini en geniş kata ayarla  
            updateRoofWidth(roof, Math.max(200, maxWidth));

            if(Array.isArray(window.user.project.mimarName) &&
            window.user.project.mimarName.length > 0 &&
            window.user.project.mimarName[0].name){
                document.getElementById('mimarName').textContent = window.user.project.mimarName[0].name;
                document.getElementById('mimarName2').textContent = window.user.project.mimarName[0].name;
            }
            
            if(Array.isArray(window.user.project.sefName) &&
            window.user.project.sefName.length > 0 &&
            window.user.project.sefName[0].name){
                document.getElementById('sefName').textContent = window.user.project.sefName[0].name;
                document.getElementById('sefName2').textContent = window.user.project.sefName[0].name;
            }

        });

        loginButton.addEventListener("click", () => {
            //window.location.href = `/?userId=${encodeURIComponent(userId)}`;
            window.location.href = "/";
        });

        async function setBuildingFromDb(){
            const dataToDb = {
                userId: userId,             // kullanıcı id'si
                projectName: projectName    // proje adı
            };

            try {  
                // Kullanıcı giriş bilgilerini backend'e gönder  
                const response = await fetch('/draw', {  
                    method: 'POST',  
                    headers: {  
                        'Content-Type': 'application/json'  
                    },
                    credentials: 'include',
                    body: JSON.stringify(dataToDb)
                });

                const result = await response.json();
                if (!response.ok && !result.success) {
                    // Sunucu response.json ile hata mesajı döndüyse
                    showWarningMessage(result.message, "tamam", true);
                } else{
                    floorsData = result.floorsData;
                    numberOfFloors = floorsData.length || 0;
                    building = result.building;
                    selectedDoor = result.selectedDoor[0].selectedDoor || "right";
                    selectedWall = result.selectedWall[0].selectedWall || "none";
                }

            } catch (error) {
                // Ağ hatası, sunucuya istek ulaşmazsa
                showWarningMessage("Bağlantı hatası, lütfen daha sonra tekrar deneyin!", "tamam", true);
                console.log('Hata:', error);
            }

            // Veriler
            const floorNumber = floorsData.length;  
            const hasBasement = isBodrumFloorDb(floorsData); // Bodrum var mı?
            const windowsPerFloor = getRoomNumbers(floorsData); // Her kattaki pencere sayısı

            setBuilding(floorNumber, hasBasement, windowsPerFloor, selectedDoor, selectedWall);

            if(Array.isArray(building) && building.length > 0){
                let topBrut = 0;
                building.forEach(element => {
                    topBrut += parseInt(element.genelBrutAlan);
                });
                totalBrutArea.textContent = topBrut + " m²";
            }
        }

        buttonHome.addEventListener("click", () => {  
            if (buildingContainerArea.classList.contains("d-none")) {  
                buildingContainerArea.classList.remove("d-none");  
            }
        });

        // Pencere Ekleme Fonksiyonu  
        function addWindows(floorNumber, floorElement, windowCount) {
            const windowContainer = document.createElement("div");  
            windowContainer.className = "window-container"; // Pencereler için yatay alan  

            // Belirtilen pencere sayısı kadar döngüyle pencere oluştur  
            for (let i = 0; i < windowCount; i++) {  
                const windowDiv = document.createElement("div");
                windowDiv.className = "window";  
                windowDiv.style.position = "relative";  
                windowDiv.style.display = "flex";  
                windowDiv.style.justifyContent = "center";  
                windowDiv.style.alignItems = "center";

                const isSold = floorsData[floorNumber].rooms[i].isSold;  

                const temporaryRowNumber = floorsData[floorNumber].rooms[i].rowNumber;
                const isOtopark = building.some(element =>
                    element.rowNumber === temporaryRowNumber && element.alanTipi === "Otopark"
                );
                let roomName = floorsData[floorNumber].rooms[i].roomName; 
                if(isOtopark){
                    roomName = "Otopark";
                }

                // Eğer önce yazı gözüksün, img alta gelsin istiyorsan zIndex değerleriyle oynayabilirsin.  
                const textSpan = document.createElement("span");  
                textSpan.textContent = roomName;  
                textSpan.style.position = "absolute";  
                textSpan.style.left = "50%";  
                textSpan.style.top = (isSold === "true" || isSold === "owner") ? "60%" : "50%";
                textSpan.style.transform = "translate(-50%, -50%)";  
                textSpan.style.fontWeight = "bold";  
                textSpan.style.fontSize = "12px";  
                textSpan.style.color = "#6c757d"; // Renk, arkası koyuysa rahat okunsun diye  
                textSpan.style.zIndex = "2"; // Yazı en önde olsun  

                windowDiv.appendChild(textSpan);  // Önce yazıyı ekle  

                // Eğer img olması gereken durumdaysa ekle  
                if(  
                    (windowCount == 1  && (isSold === "true" || isSold === "owner")) ||  
                    (windowCount == 2  && (isSold === "true" || isSold === "owner")) ||  
                    (windowCount == 3  && (isSold === "true" || isSold === "owner")) ||  
                    (windowCount == 4  && (isSold === "true" || isSold === "owner")) ||  
                    (windowCount == 5  && (isSold === "true" || isSold === "owner")) ||  
                    (windowCount == 6  && (isSold === "true" || isSold === "owner")) ||  
                    (windowCount == 7  && (isSold === "true" || isSold === "owner")) ||  
                    (windowCount == 8  && (isSold === "true" || isSold === "owner")) 
                    
                ){  
                    setImg(windowDiv, isSold);  
                }  

                // Boyutlar aynı  
                if(windowCount == 1) {  
                    windowDiv.style.height = "65px";  
                    windowDiv.style.width = "280px";  
                } else if (windowCount == 2) {  
                    windowDiv.style.height = "65px";  
                    windowDiv.style.width = "135px";  
                } else if(windowCount == 3){  
                    windowDiv.style.height = "65px";  
                    windowDiv.style.width = "90px";  
                } else if(windowCount == 4){  
                    windowDiv.style.height = "65px";  
                    windowDiv.style.width = "65px";  
                } else if(windowCount == 5){  
                    windowDiv.style.height = "50px";  
                    windowDiv.style.width = "50px";  
                } else if(windowCount == 6){  
                    windowDiv.style.height = "40px";  
                    windowDiv.style.width = "40px";  
                } else if(windowCount == 7){  
                    windowDiv.style.height = "35px";  
                    windowDiv.style.width = "33px";  
                } else if(windowCount == 8){  
                    windowDiv.style.height = "35px";
                    windowDiv.style.width = "28px";  
                }  
                // Tıklama olayı ekle
                windowDiv.addEventListener('click', (e) => {
                    e.stopPropagation();
                    if (isOtopark) {
                        return;
                    }
                    const roomData = floorsData[floorNumber].rooms[i];
                    getModal(modalTitle, modalSubtitle, roomModalImage, modalDesc, sellButton, removeSellButton, 
                            ownerButton, floorsData[floorNumber].floorName, roomData.roomName, roomData.rowNumber, buttonGroup, roomInfoForm, okButton,
                            buyerInfo, itemPrice, fromControl, userId, projectName, building, floorsData)
                        .then((updatedFloorData) => {
                            setBuildingFromDb();
                            if (fromControl) {  
                                const previousUrl = window.location.href; 
                                window.location.href = 
                                    'quatation?from=' + encodeURIComponent(previousUrl) + 
                                    '&projectName=' + encodeURIComponent(projectName);  
                            }
                        })  
                        .catch((error) => {
                            if (fromControl) {  
                                const previousUrl = window.location.href; 
                                    'quatation?from=' + encodeURIComponent(previousUrl) + 
                                    '&projectName=' + encodeURIComponent(projectName); 
                            }
                            //console.error("Modal kapatma hatası:", error);  
                        });
                });

                windowContainer.appendChild(windowDiv);  
            }  

            function setImg(windowDiv, isSold) {  
                const img = new Image();  
                if(isSold === "true"){  
                    img.src = "img/sold_3.png";  
                    img.alt = "Sold";  
                } else if(isSold === "owner"){  
                    img.src = "img/owner_3.png";  
                    img.alt = "Owner";  
                }  
                img.style.position = "absolute";  
                img.style.left = "50%";  
                img.style.top = "25%";  
                img.style.transform = "translate(-50%, -50%)";  
                img.style.width = "100%";  
                img.style.height = "100%";
                img.style.objectFit = "contain"; 
                img.style.zIndex = "1"; // Görsel yazının arkasında 
                windowDiv.appendChild(img);  
            }

            // Pencere grubunu kat içine ekle  
            floorElement.appendChild(windowContainer);  
            return windowContainer; // Dinamik çatı genişliği için  
        }  

        // Çatı Genişliğini Güncelleme Fonksiyonu  
        function updateRoofWidth(roofElement, width) {
            roofElement.style.borderLeft = `${width / 2}px solid transparent`;  
            roofElement.style.borderRight = `${width / 2}px solid transparent`;  
        }

        function setBuilding(floorNumber, hasBasement, windowsPerFloor, selectedDoor, selectedWall) {  
            buildingContainer.innerHTML = "";  

            // Çatı SVG  
            const roofSVG = `  
                <svg class="roof-svg" viewBox="0 0 300 90" style="display:block; width:300px; height:130px;">  
                <defs>  
                    <pattern id="brick" patternUnits="userSpaceOnUse" width="18" height="15">  
                    <image href="/img/brick.png" width="18" height="15"/>  
                    <line x1="0" y1="15" x2="18" y2="15" stroke="#fff" stroke-width="2"/>  
                    <line x1="9" y1="0" x2="9" y2="15" stroke="#fff" stroke-width="2"/>  
                    <line x1="0" y1="0" x2="0" y2="15" stroke="#fff" stroke-width="2"/>  
                    <line x1="18" y1="0" x2="18" y2="15" stroke="#fff" stroke-width="2"/>  
                    </pattern>  
                </defs>  
                <polygon points="0,90 150,0 300,90" fill="url(#brick)" />  
                </svg>
            `;
            buildingContainer.insertAdjacentHTML('beforeend', roofSVG);  

            let maxWidth = 300; // Minimum genişlik
            windowsPerFloor.forEach(windowCount => {  
                const width = Math.max(300, windowCount * 30);  
                if (width > maxWidth) {  
                    maxWidth = width;  
                }  
            });  

            for (let i = floorNumber - 1; i >= 0; i--) {  
                const floor = document.createElement("div");  
                floor.className = "floor";  

                // Pencereleri ekle
                addWindows(i, floor, windowsPerFloor[i]); 

                // Kat isim etiketi  
                const floorName = document.createElement("div");  
                floorName.className = "floor-name";  

                if (hasBasement === true) {  
                    if (i === 0) {  
                        floorName.textContent = "Bodrum Kat";  
                        floor.style.backgroundColor = "#404448";
                    } else if (i === 1) {  
                        floorName.textContent = "Zemin Kat";  
                    } else {  
                        floorName.textContent = `${i - 1}. Kat`;  
                    }  
                } else {  
                    if (i === 0) {  
                        floorName.textContent = "Zemin Kat";  
                    } else {  
                        floorName.textContent = `${i}. Kat`;  
                    }  
                }
                floor.appendChild(floorName);  

                floor.style.width = `${maxWidth}px`;  

                // --- TEK KAPIYI EN ALT KATA EKLE ---
                if (
                    (hasBasement && i === 0) ||             // Bodrum varsa oraya ekle
                    (!hasBasement && i === 0)               // Yoksa zemin kata ekle
                ) {
                    const doorLeft = document.createElement("img");
                    doorLeft.src = "img/door_left.png";
                    doorLeft.alt = "Sol Kapı";
                    doorLeft.className = "img-door selectable-door";
                    doorLeft.style.position = "absolute";
                    doorLeft.style.left = "-25px";
                    doorLeft.style.bottom = "0";

                    const doorRight = document.createElement("img");
                    doorRight.src = "img/door_right.png";
                    doorRight.alt = "Sağ Kapı";
                    doorRight.className = "img-door selectable-door";
                    doorRight.style.position = "absolute";
                    doorRight.style.right = "-25px";
                    doorRight.style.bottom = "0";

                    // Duvarlar
                    const wallLeft = document.createElement("img");
                    wallLeft.src = "img/wall_left.png";
                    wallLeft.alt = "Sol Duvar";
                    wallLeft.className = "img-wall kapi-animasyon";
                    wallLeft.style.position = "absolute";
                    wallLeft.style.left = "-30px";
                    wallLeft.style.bottom = "0";
                    wallLeft.style.width = "25px";
                    wallLeft.style.height = `${90 * numberOfFloors}px`;
                    wallLeft.style.cursor = "pointer";

                    const wallRight = document.createElement("img");
                    wallRight.src = "img/wall_right.png";
                    wallRight.alt = "Sağ Duvar";
                    wallRight.className = "img-wall kapi-animasyon";
                    wallRight.style.position = "absolute";
                    wallRight.style.right = "-30px";
                    wallRight.style.bottom = "0";
                    wallRight.style.width = "25px";
                    wallRight.style.height = `${90 * numberOfFloors}px`;
                    wallRight.style.cursor = "pointer";


                    if(selectedDoor === "right"){
                        floor.appendChild(doorRight);
                    } else if(selectedDoor === "left"){
                        floor.appendChild(doorLeft);
                    }

                    if(selectedWall === "right"){
                        floor.appendChild(wallRight);
                    } else if(selectedWall === "left"){
                        floor.appendChild(wallLeft);
                    } else if(selectedWall === "both"){
                        floor.appendChild(wallRight);
                        floor.appendChild(wallLeft);
                    } else if(selectedWall === "none"){
                        wallLeft.style.display = "none";
                        wallRight.style.display = "none";
                    }
                    
                }

                buildingContainer.appendChild(floor);
            }
        }

        regulationButton.addEventListener("click", () => {
            window.location.href = `/bina?projectName=${encodeURIComponent(projectName)}`;
        });
        /*
        quatationButton.addEventListener("click", () => {
            window.location.href = `/quatation?projectName=${encodeURIComponent(projectName)}`;
        });
        */
        graphsButton.addEventListener("click", () => {
           window.location.href = `/analiz?projectName=${encodeURIComponent(projectName)}`;
        });
        soldButton.addEventListener("click", () => {
            window.location.href = `/sold?projectName=${encodeURIComponent(projectName)}`;
        });
        material.addEventListener("click", () => {
            window.location.href = `/malzeme?projectName=${encodeURIComponent(projectName)}`;
        });
        documentButton.addEventListener("click", () => {
            window.location.href = `/evrak?projectName=${encodeURIComponent(projectName)}`;
        });

        function syncTotalAreaWidth() {
            const building = document.querySelector('#building-container');
            const totalAreaDiv = document.querySelector('.total-area-container');
            if (building && totalAreaDiv) {
                totalAreaDiv.style.width = building.offsetWidth + "px";
                totalAreaDiv.style.marginLeft = "auto";
                totalAreaDiv.style.marginRight = "auto";
            }
        }
        window.addEventListener('DOMContentLoaded', syncTotalAreaWidth);
        window.addEventListener('resize', syncTotalAreaWidth);

        let nameEditTarget = null;
        function openNameEditModal(title, currentText, onSave) {
            document.getElementById('name-edit-modal-title').textContent = title;
            const input = document.getElementById('name-edit-modal-input');
            input.value = currentText || '';
            setTimeout(() => input.focus(), 100); // Modal açılır açılmaz input fokus
            document.getElementById('name-edit-modal-overlay').classList.add('active');
            nameEditTarget = onSave;
        }
        function closeNameEditModal() {
            document.getElementById('name-edit-modal-overlay').classList.remove('active');
            nameEditTarget = null;
        }
        async function saveNameEditModal() {
            const title = document.getElementById('name-edit-modal-title').textContent;
            const text = document.getElementById('name-edit-modal-input').value.trim();
            if (nameEditTarget) {
                nameEditTarget(text);
                let areaDb = title === "Mimar İsmi" ? "mimarName" :
                    title === "Şantiye Şefi İsmi" ? "sefName" :
                    "mimarName";
                const data = {
                    text,
                    areaDb
                };
                await saveName(data);
                closeNameEditModal();
            }
        }

        document.getElementById('mimarEnter').onclick = function() {
            openNameEditModal("Mimar İsmi", document.getElementById('mimarName').textContent, function(val) {
                document.getElementById('mimarName').textContent = val;
            });
        };
        document.getElementById('sefEnter').onclick = function() {
            openNameEditModal("Şantiye Şefi İsmi", document.getElementById('sefName').textContent, function(val) {
                document.getElementById('sefName').textContent = val;
            });
        };
        // MOBIL versiyonlar için eklemeler
        document.getElementById('mimarEnter2').onclick = function() {
            openNameEditModal("Mimar İsmi", document.getElementById('mimarName2').textContent, function(val) {
                document.getElementById('mimarName2').textContent = val;
            });
        };
        document.getElementById('sefEnter2').onclick = function() {
            openNameEditModal("Şantiye Şefi İsmi", document.getElementById('sefName2').textContent, function(val) {
                document.getElementById('sefName2').textContent = val;
            });
        };

        document.getElementById('name-edit-modal-close').onclick = closeNameEditModal;
        document.getElementById('name-edit-modal-save').onclick = saveNameEditModal;
        document.getElementById('name-edit-modal-input').onkeydown = function(e){
            if (e.key === "Enter") saveNameEditModal();
            if (e.key === "Escape") closeNameEditModal();
        };
        // Overlay'e tıklayınca da kapansın
        document.getElementById('name-edit-modal-overlay').onclick = function(e){
            if(e.target === this) closeNameEditModal();
        };

        async function saveName(saves){
            showLoader();
            try {
                const response = await fetch('/draw', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        process: "saveName",
                        userId: userId, 
                        projectName: projectName,
                        saves
                    })
                });

                const data = await response.json();
                if(response.ok) {
                    if(data.message === "Mimar adı güncellendi."){
                        document.getElementById('mimarName').textContent = data.mimarName[0].name
                        document.getElementById('mimarName2').textContent = data.mimarName[0].name;
                    } else{
                        document.getElementById('sefName').textContent = data.sefName[0].name
                        document.getElementById('sefName2').textContent = data.sefName[0].name;
                    }
                    
                } else {
                    console.error('Beklenmeyen hata:', data.message || data);
                }

            } catch (error) {
                console.error("Fetch hatası:", error);
            } finally {
                hideLoader();
            }
        }

        function showLoader() {
            document.getElementById('loader').style.display = 'flex';
        }
        function hideLoader() {
            document.getElementById('loader').style.display = 'none';
        }

      </script>

</body>  
</html>